{"version":3,"file":"8874.c537936ef42191588f7a.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/AdvertiseDetailsPanel.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/SelectAppPanel.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiTryOut/TryOutController.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Box from '@mui/material/Box';\nimport MuiAlert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\n\nconst AdvertiseDetailsPanel = (props) => {\n    const {\n        classes,\n        advAuthHeader,\n        advAuthHeaderValue,\n        handleChanges,\n        selectedEndpoint,\n        api: {\n            advertiseInfo,\n            transport,\n            securityScheme,\n            authorizationHeader,\n            gatewayVendor,\n        },\n    } = props;\n\n    const availableTransports = transport.join(', ').toUpperCase();\n    let securitySchemes = '';\n    securityScheme.forEach((scheme, index) => {\n        if (index !== 0) {\n            securitySchemes += ', ';\n        }\n        if (scheme === 'basic_auth') {\n            securitySchemes += 'Basic';\n        } else if (scheme === 'oauth2') {\n            securitySchemes += 'OAuth2';\n        } else if (scheme === 'mutualssl') {\n            securitySchemes += 'Mutual SSL';\n        } else if (scheme === 'api_key') {\n            securitySchemes += 'API Key';\n        } else {\n            securitySchemes = securitySchemes.substring(0, securitySchemes.length - 2);\n        }\n    });\n\n    return (\n        <Box display='block' justifyContent='center' className={classes.authHeader}>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography\n                    variant='h6'\n                    component='label'\n                    id='authentication-heading'\n                    color='textSecondary'\n                    className={classes.tryoutHeading}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.authentication.heading'\n                        defaultMessage='Authentication'\n                    />\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} x={8} md={6} direction='row' className={classes.tokenType}>\n                <Grid xs={6} md={4} style={{ paddingLeft: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeader'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header'\n                                defaultMessage='Authorization Header'\n                            />\n                        )}\n                        name='advAuthHeader'\n                        onChange={handleChanges}\n                        value={advAuthHeader || ''}\n                        fullWidth\n                    />\n                </Grid>\n                <Grid xs={6} md={8} style={{ paddingRight: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeaderValue'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header.value'\n                                defaultMessage='Authorization Header Value'\n                            />\n                        )}\n                        name='advAuthHeaderValue'\n                        onChange={handleChanges}\n                        value={advAuthHeaderValue || ''}\n                        fullWidth\n                    />\n                </Grid>\n            </Grid>\n            {gatewayVendor === 'wso2' &&\n                <Grid x={12} md={6} className={classes.centerItems}>\n                    <Typography\n                        variant='h6'\n                        component='label'\n                        id='key-type'\n                        color='textSecondary'\n                        className={classes.tryoutHeading}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.heading'\n                            defaultMessage='API Endpoint'\n                        />\n                    </Typography>\n                    <TextField\n                        fullWidth\n                        select\n                        id='selectedEndpoint'\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Endpoint type'\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint'\n                            />\n                        )}\n                        value={selectedEndpoint}\n                        name='selectedEndpoint'\n                        onChange={handleChanges}\n                        helperText={(\n                            <FormattedMessage\n                                defaultMessage='Please select an endpoint type'\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.help'\n                            />\n                        )}\n                        margin='normal'\n                        variant='outlined'\n                    >\n                        {advertiseInfo.apiExternalProductionEndpoint && (\n                            <MenuItem\n                                value='PRODUCTION'\n                                className={classes.menuItem}\n                            >\n                                Production\n                            </MenuItem>\n                        )}\n                        {advertiseInfo.apiExternalSandboxEndpoint && (\n                            <MenuItem\n                                value='SANDBOX'\n                                className={classes.menuItem}\n                            >\n                                Sandbox\n                            </MenuItem>\n                        )}\n                    </TextField>\n                </Grid>\n            }\n            {(availableTransports || securitySchemes || authorizationHeader) && (\n                <Grid x={12} md={6} className={classes.centerItems} style={{ marginTop: '10px' }}>\n                    <MuiAlert severity='info' variant='filled' sx={{ bgcolor: 'background.paper' }}>\n                        <AlertTitle>\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.security.details'\n                                defaultMessage='Security Details'\n                            />\n                        </AlertTitle>\n                        {availableTransports && (\n                            <div>\n                                <strong>Transports: </strong>\n                                {availableTransports}\n                            </div>\n                        )}\n                        {securitySchemes && (\n                            <div>\n                                <strong>Security schemes: </strong>\n                                {securitySchemes}\n                            </div>\n                        )}\n                        {authorizationHeader && (\n                            <div>\n                                <strong>Authorization header: </strong>\n                                {authorizationHeader}\n                            </div>\n                        )}\n                    </MuiAlert>\n                </Grid>\n            )}\n        </Box>\n    );\n};\n\nexport default AdvertiseDetailsPanel;\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Grid, FormControl, FormControlLabel, RadioGroup, Radio, Typography,\n} from '@mui/material';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\n\nconst PREFIX = 'SelectAppPanel';\n\nconst classes = {\n    centerItems: `${PREFIX}-centerItems`,\n    tryoutHeading: `${PREFIX}-tryoutHeading`,\n    menuItem: `${PREFIX}-menuItem`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.centerItems}`]: {\n        margin: 'auto',\n    },\n\n    [`& .${classes.tryoutHeading}`]: {\n        display: 'block',\n        fontWeight: 400,\n    },\n\n    [`& .${classes.menuItem}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n}));\n\nconst SelectAppPanel = (props) => {\n    let {\n        selectedApplication, selectedKeyType,\n    } = props;\n\n    const {\n        subscriptions, handleChanges, allApplications,\n    } = props;\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} event event fired\n     */\n    const handleSelectPanelChange = (event) => {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedApplication':\n                selectedApplication = value;\n                break;\n            case 'selectedKeyType':\n                selectedKeyType = value;\n                break;\n            default:\n                break;\n        }\n        handleChanges(event);\n    };\n    return (\n        <Root>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                {allApplications !== null ? (\n                    <TextField\n                        fullWidth\n                        id='selected-application'\n                        select\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Applications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                            />\n                        )}\n                        value={selectedApplication}\n                        name='selectedApplication'\n                        onChange={handleSelectPanelChange}\n                        SelectProps={allApplications}\n                        helperText={(\n                            <FormattedMessage\n                                defaultMessage='Available applications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.available.application'\n                            />\n                        )}\n                        margin='normal'\n                        variant='outlined'\n                    >\n                        {allApplications.map((app) => (\n                            <MenuItem\n                                value={app.applicationId}\n                                key={app.applicationId}\n                                className={classes.menuItem}\n                            >\n                                {app.name}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                ) : (\n                    <TextField\n                        fullWidth\n                        id='selected-application'\n                        select\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Applications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                            />\n                        )}\n                        value={selectedApplication}\n                        name='selectedApplication'\n                        onChange={handleSelectPanelChange}\n                        SelectProps={subscriptions}\n                        helperText={(\n                            <FormattedMessage\n                                defaultMessage='Subscribed applications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.subscribed.application'\n                            />\n                        )}\n                        margin='normal'\n                        variant='outlined'\n                    >\n                        {subscriptions.map((sub) => (\n                            <MenuItem\n                                value={sub.applicationInfo.applicationId}\n                                key={sub.applicationInfo.applicationId}\n                                className={classes.menuItem}\n                            >\n                                {sub.applicationInfo.name}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                )}\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography variant='h6' component='label' id='key-type' color='textSecondary' className={classes.tryoutHeading}>\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type.heading'\n                        defaultMessage='Key Type'\n                    />\n                </Typography>\n                {allApplications !== null ? (\n                    <FormControl variant='standard' component='fieldset'>\n                        <RadioGroup\n                            name='selectedKeyType'\n                            value={selectedKeyType}\n                            onChange={handleSelectPanelChange}\n                            aria-labelledby='key-type'\n                            row\n                        >\n                            <FormControlLabel\n                                value='PRODUCTION'\n                                control={<Radio />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                        defaultMessage='Production'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='SANDBOX'\n                                control={<Radio />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                        defaultMessage='Sandbox'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                ) : (\n                    <FormControl variant='standard' component='fieldset'>\n                        <RadioGroup\n                            name='selectedKeyType'\n                            value={selectedKeyType}\n                            onChange={handleSelectPanelChange}\n                            aria-labelledby='key-type'\n                            row\n                        >\n                            {(subscriptions !== null && (subscriptions.find((sub) => sub.applicationId\n                                    === selectedApplication).status === 'UNBLOCKED'\n                                    || subscriptions.find((sub) => sub.applicationId\n                                    === selectedApplication).status === 'TIER_UPDATE_PENDING'))\n                                    && (\n                                        <FormControlLabel\n                                            value='PRODUCTION'\n                                            control={<Radio />}\n                                            label={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                                    defaultMessage='Production'\n                                                />\n                                            )}\n                                        />\n                                    )}\n                            <FormControlLabel\n                                value='SANDBOX'\n                                control={<Radio />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                        defaultMessage='Sandbox'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                )}\n            </Grid>\n        </Root>\n    );\n};\n\nexport default (SelectAppPanel);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect, useState, useRef,\n} from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl, CircularProgress, Tooltip,\n} from '@mui/material';\nimport HelpOutline from '@mui/icons-material/HelpOutline';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Icon from '@mui/material/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport AdvertiseDetailsPanel from 'AppComponents/Shared/ApiTryOut/AdvertiseDetailsPanel';\nimport Progress from '../Progress';\nimport Api from '../../../data/api';\nimport Application from '../../../data/Application';\nimport CONSTANTS from '../../../data/Constants';\nimport SelectAppPanel from './SelectAppPanel';\n\nconst PREFIX = 'TryOutController';\n\nconst classes = {\n    centerItems: `${PREFIX}-centerItems`,\n    tokenType: `${PREFIX}-tokenType`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    tryoutHeading: `${PREFIX}-tryoutHeading`,\n    genKeyButton: `${PREFIX}-genKeyButton`,\n    gatewayEnvironment: `${PREFIX}-gatewayEnvironment`,\n    categoryHeading: `${PREFIX}-categoryHeading`,\n    tooltip: `${PREFIX}-tooltip`,\n    menuItem: `${PREFIX}-menuItem`,\n    warningIcon: `${PREFIX}-warningIcon`,\n    loadMoreLink: `${PREFIX}-loadMoreLink`,\n    link: `${PREFIX}-link`,\n    authHeader: `${PREFIX}-authHeader`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    width: '100%',\n    [`& .${classes.centerItems}`]: {\n        margin: 'auto',\n    },\n\n    [`& .${classes.tokenType}`]: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#6d6d6d',\n        },\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.tryoutHeading}`]: {\n        fontWeight: 400,\n        display: 'block',\n    },\n\n    [`& .${classes.genKeyButton}`]: {\n        background: theme.palette.grey[300],\n        width: theme.spacing(20),\n        height: theme.spacing(5),\n        marginTop: theme.spacing(2.5),\n        marginLeft: theme.spacing(2),\n        '&:disabled': {\n            cursor: 'not-allowed',\n            background: theme.palette.grey[50],\n        },\n    },\n\n    [`& .${classes.gatewayEnvironment}`]: {\n        marginTop: theme.spacing(4),\n    },\n\n    [`& .${classes.categoryHeading}`]: {\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(-5),\n    },\n\n    [`& .${classes.tooltip}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.menuItem}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n\n    [`& .${classes.warningIcon}`]: {\n        color: '#ff9a00',\n        fontSize: 25,\n        marginRight: 10,\n    },\n\n    [`& .${classes.loadMoreLink}`]: {\n        textDecoration: 'none',\n        margin: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.link}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.authHeader}`]: {\n        marginBottom: '20px',\n    },\n}));\n\n/**\n * TryOut component\n *\n * @class TryOutController\n * @extends {Component}\n */\nfunction TryOutController(props) {\n    const {\n        securitySchemeType, selectedEnvironment, environments,\n        productionAccessToken, sandboxAccessToken, selectedKeyType, setKeys, setSelectedKeyType, setSelectedKeyManager,\n        setSelectedEnvironment, setProductionAccessToken, setSandboxAccessToken, scopes, setSecurityScheme, setUsername,\n        setPassword, username, password, updateSwagger, setProductionApiKey, setSandboxApiKey, productionApiKey,\n        sandboxApiKey, environmentObject, setURLs, setAdvAuthHeader, setAdvAuthHeaderValue, advAuthHeader,\n        advAuthHeaderValue, setSelectedEndpoint, selectedEndpoint, api, URLs, onConfigChange,\n    } = props;\n    let { selectedKeyManager } = props;\n    selectedKeyManager = selectedKeyManager || 'Resident Key Manager';\n\n    const [showToken, setShowToken] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [allApplications, setAllApplications] = useState(null);\n    const [selectedApplication, setSelectedApplication] = useState([]);\n    const [keyManagers, setKeyManagers] = useState([]);\n    const [selectedKMObject, setSelectedKMObject] = useState(null);\n    const [ksGenerated, setKSGenerated] = useState(false);\n    const [showMoreGWUrls, setShowMoreGWUrls] = useState(false);\n    const [tokenValue, setTokenValue] = useState('');\n    const apiID = api.id;\n    const restApi = new Api();\n    const user = AuthManager.getUser();\n    const isSubValidationDisabled = api.tiers && api.tiers.length === 1\n            && api.tiers[0].tierName.includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN);\n\n    const handleAccessTokenChange = ({ newAccessToken }) => {\n        if (onConfigChange) {\n            onConfigChange({\n                newAccessToken,\n                newSecurityScheme: securitySchemeType,\n                newUsername: username,\n                newPassword: password,\n                newSelectedEnvironment: selectedEnvironment,\n            });\n        }\n    };\n\n    useEffect(() => {\n        let subscriptionsList;\n        let appList;\n        let newSelectedApplication;\n        let keys;\n        let selectedKeyTypes = 'PRODUCTION';\n        let accessToken;\n        if (api.lifeCycleStatus) {\n            if (isSubValidationDisabled) {\n                const promiseAllApplications = Application.all(100, 0, 'asc', 'name', '');\n                promiseAllApplications.then((appResponse) => {\n                    if (appResponse !== null) {\n                        appList = appResponse.list.filter((app) => app.status === 'APPROVED');\n                        if (appList && appList.length > 0) {\n                            newSelectedApplication = appList[0].applicationId;\n                            Application.get(newSelectedApplication)\n                                .then((application) => {\n                                    return application.getKeys();\n                                })\n                                .then((appKeys) => {\n                                    if (appKeys.get(selectedKeyManager)\n                                        && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                        selectedKeyTypes = 'SANDBOX';\n                                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                    } else if (appKeys.get(selectedKeyManager)\n                                        && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                        selectedKeyTypes = 'PRODUCTION';\n                                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                    }\n                                    setSelectedApplication(newSelectedApplication);\n                                    setAllApplications(appList);\n                                    setKeys(appKeys);\n                                    setSelectedEnvironment(selectedEnvironment, false);\n                                    setSelectedKeyType(selectedKeyTypes, false);\n                                    if (selectedKeyType === 'PRODUCTION') {\n                                        setProductionAccessToken(accessToken);\n                                    } else {\n                                        setSandboxAccessToken(accessToken);\n                                    }\n                                });\n                        }\n                    }\n                }).catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n            }\n            const promiseSubscriptions = restApi.getSubscriptions(apiID);\n            promiseSubscriptions.then((subscriptionsResponse) => {\n                if (subscriptionsResponse !== null) {\n                    subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                        || item.status === 'PROD_ONLY_BLOCKED' || item.status === 'TIER_UPDATE_PENDING');\n\n                    if (subscriptionsList && subscriptionsList.length > 0) {\n                        newSelectedApplication = subscriptionsList[0].applicationId;\n                        Application.get(newSelectedApplication)\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                    selectedKeyTypes = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                } else if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                    selectedKeyTypes = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                }\n                                setSelectedApplication(newSelectedApplication);\n                                setSubscriptions(subscriptionsList);\n                                setKeys(appKeys);\n                                setSelectedEnvironment(selectedEnvironment, false);\n                                setSelectedKeyType(selectedKeyTypes, false);\n                                if (selectedKeyType === 'PRODUCTION') {\n                                    setProductionAccessToken(accessToken);\n                                } else {\n                                    setSandboxAccessToken(accessToken);\n                                }\n                            });\n                    } else {\n                        setSelectedApplication(newSelectedApplication);\n                        setSubscriptions(subscriptionsList);\n                        setKeys(keys);\n                        setSelectedEnvironment(selectedEnvironment, false);\n                        if (selectedKeyType === 'PRODUCTION') {\n                            setProductionAccessToken(accessToken);\n                        } else {\n                            setSandboxAccessToken(accessToken);\n                        }\n                        setSelectedKeyType(selectedKeyType, false);\n                    }\n                } else {\n                    setSelectedApplication(newSelectedApplication);\n                    setSubscriptions(subscriptionsList);\n                    setKeys(keys);\n                    setSelectedEnvironment(selectedEnvironment, false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setSelectedKeyType(selectedKeyType, false);\n                }\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n            const promisedKeyManagers = restApi.getKeyManagers();\n            promisedKeyManagers\n                .then((response) => {\n                    const responseKeyManagerList = [];\n                    response.body.list.map((item) => responseKeyManagerList.push(item));\n                    setKeyManagers(responseKeyManagerList);\n                    const filteredKMs = (responseKeyManagerList.filter((km) => km.name === selectedKeyManager));\n                    if (filteredKMs && filteredKMs.length > 0) {\n                        setSelectedKMObject(filteredKMs[0]);\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     * Generate access token\n     * */\n    function generateAccessToken() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const applicationPromise = Application.get(selectedApplication);\n            applicationPromise\n                .then((application) => application.generateToken(\n                    selectedKeyManager,\n                    selectedKeyType,\n                    3600,\n                    scopes,\n                ))\n                .then((response) => {\n                    console.log('token generated successfully ' + response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(response.accessToken);\n                    } else {\n                        setSandboxAccessToken(response.accessToken);\n                    }\n                    handleAccessTokenChange({ newAccessToken: response.accessToken });\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     * Generate api key\n     * */\n    function generateApiKey() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const promisedKey = restApi.generateApiKey(selectedApplication, selectedKeyType, -1);\n            promisedKey\n                .then((response) => {\n                    console.log('Non empty response received', response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionApiKey(response.body.apikey);\n                    } else {\n                        setSandboxApiKey(response.body.apikey);\n                    }\n                    handleAccessTokenChange({ newAccessToken: response.body.apikey });\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof TryOutController\n     */\n    function handleClickShowToken() {\n        setShowToken(!showToken);\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof TryOutController\n     */\n    function updateApplication() {\n        if (api.lifeCycleStatus) {\n            let accessToken;\n            let keyType;\n            if (isSubValidationDisabled) {\n                if (allApplications !== null && allApplications.length !== 0 && selectedApplication.length !== 0) {\n                    if (allApplications.find((app) => app.applicationId\n                        === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                        setSelectedKeyType(selectedKeyType, false);\n                        keyType = 'SANDBOX';\n                    } else {\n                        keyType = selectedKeyType;\n                    }\n                }\n            } else {\n                if (subscriptions !== null && subscriptions.length !== 0 && selectedApplication.length !== 0) {\n                    if (subscriptions.find((sub) => sub.applicationId\n                        === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                        setSelectedKeyType(selectedKeyType, false);\n                        keyType = 'SANDBOX';\n                    } else {\n                        keyType = selectedKeyType;\n                    }\n                }\n            }\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(keyType || 'PRODUCTION');\n                })\n                .then((appKeys) => {\n                    const selectedKeys = appKeys.get(selectedKeyManager);\n                    if (selectedKeys && selectedKeys.keyType === selectedKeyType) {\n                        ({ accessToken } = selectedKeys.token);\n                    }\n                    if (selectedKeys && selectedKeys.keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else if (selectedKeys && selectedKeys.keyType === 'SANDBOX') {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    if (selectedKeys && selectedKeys.consumerKey && selectedKeys.consumerKey !== '') {\n                        setKSGenerated(true);\n                    } else {\n                        setKSGenerated(false);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    }\n\n    useEffect(() => {\n        updateApplication();\n    }, [selectedApplication, selectedKeyType, selectedEnvironment, securitySchemeType]);\n\n    useEffect(() => {\n        if (onConfigChange) {\n            onConfigChange({\n                newAccessToken: null,\n                newSecurityScheme: securitySchemeType,\n                newUsername: username,\n                newPassword: password,\n                newSelectedEnvironment: selectedEnvironment\n            });\n        }\n    }, [username, password, selectedEnvironment, securitySchemeType]); \n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof TryOutController\n     */\n    function handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                setSelectedEnvironment(value, true);\n                if (api.type !== 'GRAPHQL') {\n                    updateSwagger(value);\n                }\n                if (environmentObject) {\n                    const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n                    setURLs(urls);\n                }\n                break;\n            case 'selectedApplication':\n                setProductionAccessToken('');\n                setSandboxAccessToken('');\n                setProductionApiKey('');\n                setSandboxApiKey('');\n                setSelectedApplication(value);\n                break;\n            case 'selectedKeyManager':\n                setSelectedKeyManager(value, true, selectedApplication);\n                break;\n            case 'selectedKeyType':\n                if (!productionAccessToken || !sandboxAccessToken) {\n                    setSelectedKeyType(value, true, selectedApplication);\n                } else {\n                    setSelectedKeyType(value, false, selectedApplication);\n                }\n                break;\n            case 'securityScheme':\n                setSecurityScheme(value);\n                break;\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'accessToken':\n                handleAccessTokenChange({ newAccessToken: value });\n                if (securitySchemeType === 'API-KEY' && selectedKeyType === 'PRODUCTION') {\n                    setProductionApiKey(value);\n                } else if (securitySchemeType === 'API-KEY' && selectedKeyType === 'SANDBOX') {\n                    setSandboxApiKey(value);\n                } else if (selectedKeyType === 'PRODUCTION') {\n                    setProductionAccessToken(value);\n                } else {\n                    setSandboxAccessToken(value);\n                }\n                break;\n            case 'advAuthHeader':\n                setAdvAuthHeader(value);\n                break;\n            case 'advAuthHeaderValue':\n                setAdvAuthHeaderValue(value);\n                break;\n            case 'selectedEndpoint':\n                setSelectedEndpoint(value);\n                break;\n            default:\n        }\n    }\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let isTestKeyEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        isTestKeyEnabled = api.securityScheme.includes('test_auth');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = api.apiKeyHeader ? api.apiKeyHeader : 'ApiKey';\n            prefix = '';\n        }\n        if (isTestKeyEnabled && securitySchemeType === 'TEST') {\n            authorizationHeader = 'testKey';\n            prefix = '';\n        }\n    }\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    const isPublished = api.lifeCycleStatus.toLowerCase() === 'published';\n    const showSecurityType = isPublished || isPrototypedAPI;\n\n    const authHeader = `${authorizationHeader}: ${prefix}`;\n\n    useEffect(() => {\n        if (securitySchemeType === 'API-KEY') {\n            setTokenValue(selectedKeyType === 'PRODUCTION' ? productionApiKey : sandboxApiKey);\n        } else {\n            setTokenValue(selectedKeyType === 'PRODUCTION' ? productionAccessToken : sandboxAccessToken);\n        }\n    }, [securitySchemeType, selectedKeyType, productionAccessToken, sandboxAccessToken, productionApiKey, sandboxApiKey]);\n\n    return (\n        <Root>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Box>\n                    {securitySchemeType !== 'TEST' && (!api.advertiseInfo || !api.advertiseInfo.advertised) \n                        && (api.gatewayVendor === 'wso2' || !api.gatewayVendor) && (\n                        <>\n                            <Box mb={1}>\n                                <Typography variant='body1'>\n                                    <Box display='flex' alignItems='center'>\n                                        {(keyManagers.length > 1 && selectedKMObject && selectedKMObject.enabled) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.one'\n                                                defaultMessage='The Resident Key Manager is selected for try out console.'\n                                            />\n                                        )}\n                                        {(selectedKMObject && !selectedKMObject.enabled) && (\n                                            <>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.TryOutController.default.km.msg.two'\n                                                        defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'But the default key manager is disabled at the moment.'}\n                                                    />\n                                                </div>\n                                            </>\n                                        )}\n                                        {(selectedKMObject && selectedKMObject.length === 0) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.three'\n                                                defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'Something went wrong while selecting the default Key manager.'}\n                                            />\n                                        )}\n                                    </Box>\n                                </Typography>\n                            </Box>\n                        </>\n                    )}\n                    {((isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && showSecurityType)\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) \n                        && (api.gatewayVendor === 'wso2' || !api.gatewayVendor) && (\n                        <>\n                            <Typography variant='h5' component='h2' color='textPrimary' className={classes.categoryHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.heading'\n                                    defaultMessage='Security'\n                                />\n                            </Typography>\n                            <Typography\n                                variant='h6'\n                                component='label'\n                                id='security-type'\n                                color='textSecondary'\n                                className={classes.tryoutHeading}\n                            >\n                                <FormattedMessage\n                                    id='api.console.security.type.heading'\n                                    defaultMessage='Security Type'\n                                />\n                            </Typography>\n                            <FormControl variant='standard' component='fieldset'>\n                                <RadioGroup\n                                    name='securityScheme'\n                                    value={securitySchemeType}\n                                    onChange={handleChanges}\n                                    aria-labelledby='security-type'\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value='OAUTH'\n                                        disabled={!isOAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.oauth'\n                                                defaultMessage='OAuth'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='API-KEY'\n                                        disabled={!isApiKeyEnabled}\n                                        control={<Radio />}\n                                        id='api-key-select-radio-button'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.apikey'\n                                                defaultMessage='API Key'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='BASIC'\n                                        disabled={!isBasicAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.basic'\n                                                defaultMessage='Basic'\n                                            />\n                                        )}\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                        </>\n                    )}\n                </Box>\n            </Grid>\n\n            <Grid xs={12} md={12} item>\n                <Box display='block'>\n                    {user && subscriptions\n                        && ((isSubValidationDisabled && allApplications !== null)\n                        || (subscriptions.length > 0 && !isSubValidationDisabled))\n                        && securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised)\n                        && (api.gatewayVendor === 'wso2' || !api.gatewayVendor)\n                        && (\n                            <SelectAppPanel\n                                subscriptions={subscriptions}\n                                allApplications={allApplications}\n                                handleChanges={handleChanges}\n                                selectedApplication={selectedApplication}\n                                selectedKeyManager={selectedKeyManager}\n                                selectedKeyType={selectedKeyType}\n                                keyManagers={keyManagers}\n                            />\n                        )}\n                    {subscriptions && subscriptions.length === 0 && securitySchemeType !== 'TEST'\n                    && securitySchemeType !== 'BASIC' && (api.gatewayVendor === 'wso2' || !api.gatewayVendor)\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) && !isSubValidationDisabled ? (\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                <Box mb={1} alignItems='center'>\n                                    <Typography variant='body1'>\n                                        <Box display='flex'>\n                                            <WarningIcon className={classes.warningIcon} />\n                                            <div>\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </div>\n                                        </Box>\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            (!ksGenerated && securitySchemeType === 'OAUTH') && (!api.advertiseInfo\n                                || !api.advertiseInfo.advertised) && (api.gatewayVendor === 'wso2' || !api.gatewayVendor) && (\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    <Box mb={1} alignItems='center'>\n                                        <Typography variant='body1'>\n                                            <Box display='flex'>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.ApiConsole.keys.not.generated'\n                                                        defaultMessage={'Consumer key and secret not generated for the selected'\n                                                                + ' application on the {what} environment. '}\n                                                        values={{ what: selectedKeyType }}\n                                                    />\n                                                </div>\n                                            </Box>\n                                        </Typography>\n                                    </Box>\n                                </Grid>\n                            )\n                        )}\n                    {((!api.advertiseInfo || !api.advertiseInfo.advertised) \n                        && (api.gatewayVendor === 'wso2' || !api.gatewayVendor)) ? (\n                        <Box display='block' justifyContent='center'>\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                {securitySchemeType === 'BASIC' && (\n                                    <>\n                                        <Grid x={12} md={12} item>\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='username'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='username'\n                                                        defaultMessage='Username'\n                                                    />\n                                                )}\n                                                name='username'\n                                                onChange={handleChanges}\n                                                value={username || ''}\n                                                fullWidth\n                                            />\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='input-password'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='password'\n                                                        defaultMessage='Password'\n                                                    />\n                                                )}\n                                                name='password'\n                                                onChange={handleChanges}\n                                                type={showPassword ? 'text' : 'password'}\n                                                value={password || ''}\n                                                fullWidth\n                                                InputProps={{\n                                                    autoComplete: 'new-password',\n                                                    endAdornment: (\n                                                        <InputAdornment position='end'>\n                                                            <IconButton\n                                                                edge='end'\n                                                                aria-label='toggle password visibility'\n                                                                onClick={() => setShowPassword(!showPassword)}\n                                                                size='large'\n                                                            >\n                                                                {showPassword ? <Visibility /> : <VisibilityOff />}\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </Grid>\n                                    </>\n                                )}\n\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                    <TextField\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        label={(\n                                            <FormattedMessage\n                                                id='access.token'\n                                                defaultMessage='Access Token'\n                                            />\n                                        )}\n                                        name='accessToken'\n                                        onChange={handleChanges}\n                                        type={showToken ? 'text' : 'password'}\n                                        value={tokenValue || ''}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='enter.access.token'\n                                                defaultMessage='Enter access Token'\n                                            />\n                                        )}\n                                        id='accessTokenInput'\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <IconButton\n                                                        edge='end'\n                                                        aria-label='Toggle token visibility'\n                                                        onClick={handleClickShowToken}\n                                                        size='large'\n                                                    >\n                                                        {showToken ? <Icon>visibility_off</Icon>\n                                                            : <Icon>visibility</Icon>}\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ),\n                                            startAdornment: (\n                                                <InputAdornment\n                                                    style={{\n                                                        minWidth: (authHeader.length * 7),\n                                                    }}\n                                                    position='start'\n                                                >\n                                                    {`${authorizationHeader}: ${prefix}`}\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                )}\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                                && selectedKMObject && !selectedKMObject.enableTokenHashing && (\n                                    <>\n                                        <Button\n                                            onClick={securitySchemeType === 'API-KEY' ? generateApiKey\n                                                : generateAccessToken}\n                                            variant='contained'\n                                            color='grey'\n                                            className={classes.genKeyButton}\n                                            disabled={!user\n                                                || (subscriptions && subscriptions.length === 0 && !isSubValidationDisabled)\n                                                || (!ksGenerated && securitySchemeType === 'OAUTH')}\n                                            id='gen-test-key'\n                                        >\n                                            {isUpdating && (\n                                                <CircularProgress size={15} />\n                                            )}\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.generate.test.key'\n                                                defaultMessage='GET TEST KEY'\n                                            />\n                                        </Button>\n                                        <Tooltip\n                                            placement='right'\n                                            interactive\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.TryOutConsole.access.token.tooltip'\n                                                    defaultMessage={\n                                                        'You can use your existing Access Token or '\n                                                                + 'you can generate a new Test Key.'\n                                                    }\n                                                />\n                                            )}\n                                        >\n                                            <Box m={1} mt={2}>\n                                                <IconButton\n                                                    aria-label='Use existing Access Token or generate a new Test Key'\n                                                    size='large'\n                                                >\n                                                    <HelpOutline />\n                                                </IconButton>\n                                            </Box>\n                                        </Tooltip>\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    ) : (\n                        <AdvertiseDetailsPanel\n                            classes={classes}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            handleChanges={handleChanges}\n                            selectedEndpoint={selectedEndpoint}\n                            api={api}\n                        />\n                    )}\n                    {(!api.advertiseInfo || !api.advertiseInfo.advertised) \n                        && (api.gatewayVendor === 'wso2' || !api.gatewayVendor) && (\n                        <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                            <Grid xs={12} md={6} item>\n                                {(environments && environments.length > 0) && (\n                                    <>\n                                        <Typography\n                                            variant='h5'\n                                            component='h3'\n                                            color='textPrimary'\n                                            className={classes.categoryHeading}\n                                        >\n                                            <FormattedMessage\n                                                id='api.console.gateway.heading'\n                                                defaultMessage='Gateway'\n                                            />\n                                        </Typography>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            id='environment'\n                                            label={(\n                                                <FormattedMessage\n                                                    defaultMessage='Environment'\n                                                    id='Apis.Details.ApiConsole.environment'\n                                                />\n                                            )}\n                                            value={selectedEnvironment || (environments && environments[0].name)}\n                                            name='selectedEnvironment'\n                                            onChange={handleChanges}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    defaultMessage='Please select an environment'\n                                                    id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                />\n                                            )}\n                                            margin='normal'\n                                            variant='outlined'\n                                        >\n                                            {environments && environments.length > 0 && (\n                                                <MenuItem value='' disabled className={classes.menuItem}>\n                                                    <em>\n                                                        <FormattedMessage\n                                                            id='api.gateways'\n                                                            defaultMessage='API Gateways'\n                                                        />\n                                                    </em>\n                                                </MenuItem>\n                                            )}\n                                            {environments && (\n                                                environments.map((env) => (\n                                                    <MenuItem\n                                                        value={env.name}\n                                                        key={env.name}\n                                                        className={classes.menuItem}\n                                                    >\n                                                        {env.displayName}\n                                                    </MenuItem>\n                                                )))}\n                                        </TextField>\n                                        {api && api.type === 'GRAPHQL' && (\n                                            <>\n                                                <Typography className={classes.verticalSpace} variant='body1'>\n                                                    <a\n                                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                                        onClick={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                        onKeyDown={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                    >\n                                                        {!showMoreGWUrls ? (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more'}\n                                                                    defaultMessage='Show More'\n                                                                />\n                                                                <ExpandMoreIcon />\n\n                                                            </>\n                                                        ) : (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.less'}\n                                                                    defaultMessage='Show Less'\n                                                                />\n                                                                <ExpandLessIcon />\n                                                            </>\n                                                        )}\n                                                    </a>\n                                                </Typography>\n                                                {showMoreGWUrls && (\n                                                    <>\n                                                        <TextField\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    defaultMessage='Gateway URLs'\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more.http.URLs'}\n                                                                />\n                                                            )}\n                                                            value={URLs && URLs.https}\n                                                            name='selectedHTTPURL'\n                                                            fullWidth\n                                                            margin='normal'\n                                                            variant='outlined'\n                                                            InputProps={URLs && URLs.https}\n                                                        />\n                                                        {URLs && URLs.wss\n                                                        && (\n                                                            <TextField\n                                                                label={(\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Subscription Gateway URLs'\n                                                                        id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                        + '.environment.show.more.subscription.URLs'}\n                                                                    />\n                                                                )}\n                                                                value={URLs && URLs.wss}\n                                                                name='selectedWSURL'\n                                                                fullWidth\n                                                                margin='normal'\n                                                                variant='outlined'\n                                                                InputProps={URLs && URLs.wss}\n                                                            />\n                                                        )}\n                                                    </>\n                                                )}\n                                            </>\n                                        )}\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    )}\n                </Box>\n            </Grid>\n        </Root>\n    );\n}\n\nTryOutController.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default (TryOutController);\n"],"names":["props","classes","advAuthHeader","advAuthHeaderValue","handleChanges","selectedEndpoint","api","advertiseInfo","transport","securityScheme","authorizationHeader","gatewayVendor","availableTransports","join","toUpperCase","securitySchemes","forEach","scheme","index","substring","length","React","Box","display","justifyContent","className","authHeader","Grid","x","md","centerItems","Typography","variant","component","id","color","tryoutHeading","FormattedMessage","defaultMessage","container","spacing","direction","tokenType","xs","style","paddingLeft","item","TextField","margin","label","name","onChange","value","fullWidth","paddingRight","select","helperText","apiExternalProductionEndpoint","MenuItem","menuItem","apiExternalSandboxEndpoint","marginTop","MuiAlert","severity","sx","bgcolor","AlertTitle","PREFIX","Root","styled","_ref","theme","fontWeight","palette","getContrastText","background","paper","selectedApplication","selectedKeyType","subscriptions","allApplications","handleSelectPanelChange","event","target","SelectProps","map","app","applicationId","key","sub","applicationInfo","FormControl","RadioGroup","row","FormControlLabel","control","Radio","find","status","grid","genKeyButton","gatewayEnvironment","categoryHeading","tooltip","warningIcon","loadMoreLink","link","width","padding","marginBottom","grey","height","marginLeft","cursor","fontSize","marginRight","textDecoration","default","TryOutController","securitySchemeType","selectedEnvironment","environments","productionAccessToken","sandboxAccessToken","setKeys","setSelectedKeyType","setSelectedKeyManager","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","scopes","setSecurityScheme","setUsername","setPassword","username","password","updateSwagger","setProductionApiKey","setSandboxApiKey","productionApiKey","sandboxApiKey","environmentObject","setURLs","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","URLs","onConfigChange","selectedKeyManager","showToken","setShowToken","useState","showPassword","setShowPassword","isUpdating","setIsUpdating","notFound","setNotFound","setSubscriptions","setAllApplications","setSelectedApplication","keyManagers","setKeyManagers","selectedKMObject","setSelectedKMObject","ksGenerated","setKSGenerated","showMoreGWUrls","setShowMoreGWUrls","tokenValue","setTokenValue","apiID","restApi","Api","user","AuthManager","getUser","isSubValidationDisabled","tiers","tierName","includes","CONSTANTS","DEFAULT_SUBSCRIPTIONLESS_PLAN","handleAccessTokenChange","_ref2","newAccessToken","newSecurityScheme","newUsername","newPassword","newSelectedEnvironment","type","urls","elm","environmentName","useEffect","subscriptionsList","appList","newSelectedApplication","keys","accessToken","selectedKeyTypes","lifeCycleStatus","Application","all","then","appResponse","list","filter","get","application","getKeys","appKeys","keyType","token","catch","error","getSubscriptions","subscriptionsResponse","obj","getKeyManagers","response","responseKeyManagerList","body","push","filteredKMs","km","selectedKeys","consumerKey","updateApplication","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","isTestKeyEnabled","prefix","apiKeyHeader","isPrototypedAPI","toLowerCase","showSecurityType","advertised","mb","alignItems","enabled","WarningIcon","disabled","SelectAppPanel","values","what","AdvertiseDetailsPanel","InputProps","autoComplete","endAdornment","InputAdornment","position","IconButton","edge","onClick","size","Visibility","VisibilityOff","Icon","startAdornment","minWidth","enableTokenHashing","Button","generateApiKey","console","log","apikey","generateToken","CircularProgress","Tooltip","placement","interactive","title","m","mt","HelpOutline","env","displayName","verticalSpace","onKeyDown","ExpandLessIcon","ExpandMoreIcon","https","wss","propTypes","PropTypes","isRequired","inputAdornmentStart"],"sourceRoot":""}