{"version":3,"file":"4680.f43ad1fd2c68cd41d4ea.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./node_modules/unist-util-stringify-position/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/bail/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/trough/lib/index.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/content.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/document.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-subtokenize/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/content.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/flow.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/initialize/text.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/create-tokenizer.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/list.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-destination/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-label/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-title/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-factory-whitespace/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-html-tag-name/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://@wso2apim/devportal/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/constructs.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/preprocess.js","webpack://@wso2apim/devportal/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/postprocess.js","webpack://@wso2apim/devportal/./node_modules/micromark/lib/parse.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://@wso2apim/devportal/./node_modules/micromark-util-sanitize-uri/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://@wso2apim/devportal/./node_modules/trim-lines/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://@wso2apim/devportal/./node_modules/remark-rehype/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/rehype-filter.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/ast-to-react.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/react-markdown.js","webpack://@wso2apim/devportal/./node_modules/react-markdown/lib/uri-transformer.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n"],"names":["stringifyPosition","value","position","point","index","line","column","pos","start","end","VFileMessage","Error","constructor","reason","place","origin","parts","super","undefined","indexOf","slice","this","name","message","stack","fatal","source","ruleId","file","actual","expected","url","note","prototype","path","ext","TypeError","assertPath","seenNonSlash","length","charCodeAt","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","JSON","stringify","proc","isUrl","fileUrlOrPath","href","order","VFile","options","buffer","data","messages","history","cwd","stored","map","prop","includes","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","assertNonEmpty","push","dirname","basename","assertPart","extname","stem","toString","encoding","info","fail","part","bail","isPlainObject","Object","getPrototypeOf","Symbol","toStringTag","iterator","unified","base","transformers","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","parameters","fnExpectsCallback","done","apply","then","wrap","use","middelware","trough","attachers","frozen","namespace","freezeIndex","processor","key","arguments","assertUnfrozen","own","call","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","Array","isArray","addList","addPreset","assign","add","plugin","plugins","entry","extend","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","hasOwnProperty","keys","type","asyncName","Boolean","looksLikeAVFile","content","tokenize","effects","contentStart","attempt","parser","constructs","contentInitial","enter","consume","exit","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","ok","nok","document","disable","null","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","partial","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","splice","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","fromCharCode","join","serializeChunks","chunkIndex","go","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","all","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","before","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","test","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","search","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","children","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","title","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","alt","listItem","spread","_spread","checked","listItemValue","getData","parseInt","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","replace","codeFencedFence","lang","onexithardbreak","referenceType","fragment","labelText","ancestor","resource","setextHeadingLineSequence","setextHeadingText","configure","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","ordered","compiler","postprocess","extensions","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","extension","right","left","remarkParse","normalizeUri","skip","encodeURIComponent","footnoteReference","id","toUpperCase","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","lines","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","parent","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","to","hName","hChildren","hProperties","one","passThrough","unknownHandler","defaultUnknownHandler","nodes","toHast","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","augment","visitor","reverse","parents","visit","ctx","g","props","createState","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","remove","unwrapDisallowed","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transform","transformLinkUri","parentSchema","schema","property","addProperty","listDepth","component","components","basic","linkTarget","target","inline","level","charAt","transformImageUri","input","getInputElement","getElementsBeforeCount","style","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","find","commaSeparated","v","k","styleReplacer","parseStyle","attribute","$1","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","protocols","uriTransformer","uri","trim","first","colon"],"sourceRoot":""}