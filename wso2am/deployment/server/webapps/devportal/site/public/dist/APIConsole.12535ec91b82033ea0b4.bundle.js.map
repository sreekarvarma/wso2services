{"version":3,"file":"APIConsole.12535ec91b82033ea0b4.bundle.js","mappings":"8hBA4BA,MAAMA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,KAAM,CAC5CE,MAAO,QACPC,cAAe,IACfC,YAAa,IACbC,WAAY,IACZC,UAAW,WAGTC,GAAkBP,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,KAAM,CAC5CE,MAAO,QACPM,QAAS,IACTF,UAAW,OACXG,aAAc,OACdC,SAAU,SACVC,aAAc,WACdC,WAAY,aA8ChB,SAASC,EAAcC,GACnB,MAAM,WACFC,EAAU,SAAEC,EAAQ,KAAEC,GACtBH,EACEI,GAAkBC,EAAAA,EAAAA,UAAQ,IAvCpC,SAA2BF,EAAMG,GAC7B,MAAMC,EAAYD,EAAaE,QAAO,CAACC,EAAGC,IAAMD,EAAEC,IAAIP,GACtD,OAAOI,EAAU,gBAA6D,SAA3CA,EAAU,eAAeI,aAChE,CAoC0CC,CAAkBT,EAAMD,EAASW,WAAW,IAC5EC,GAAST,EAAAA,EAAAA,UAAQ,IA3B3B,SAA+BF,EAAMG,GACjC,MACMS,EADYT,EAAaE,QAAO,CAACC,EAAGC,IAAMD,EAAEC,IAAIP,GAC3BY,UAAY,GACjCD,EAAS,GAOf,OALAC,EAASC,SAASC,IACdC,OAAOC,OAAOF,GAAMD,SAASI,IACzBN,EAAOO,QAAQD,EAAU,GAC3B,IAECN,CACX,CAgBiCQ,CAAsBnB,EAAMD,EAASW,WAAW,IAE7E,OACIU,EAAAA,cAAA,WACIA,EAAAA,cAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,eAAe,gBAAgBC,WAAW,UACtEL,EAAAA,cAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,IACXP,EAAAA,cAACtB,EAAeC,IAEpBqB,EAAAA,cAACC,EAAAA,GAAI,CAACK,MAAI,EAACF,eAAe,WAAWC,WAAW,SAC5CL,EAAAA,cAACQ,EAAAA,EAAO,CACJC,MACIT,EAAAA,cAACU,EAAAA,EAAK,CAACC,KAAK,SACRX,EAAAA,cAACY,EAAAA,EAAS,KACNZ,EAAAA,cAACa,EAAAA,EAAQ,KACLb,EAAAA,cAACtC,EAAe,KACZsC,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,uDACHC,eAAe,cAGvBhB,EAAAA,cAACtC,EAAe,KACXmB,EAEOmB,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,+DACHC,eAAe,YAInBhB,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,gEACHC,eAAe,eAKlCnC,GACGmB,EAAAA,cAACa,EAAAA,EAAQ,KACLb,EAAAA,cAACtC,EAAe,KACZsC,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,qDACHC,eAAe,YAGvBhB,EAAAA,cAACtC,EAAe,CAACuD,MAAO,CAAEC,SAAU,IAAKC,aAAc,IAClD5B,EAAO6B,OAAS,GACb7B,EAAO8B,KAAI,CAACC,EAAOC,IAEfvB,EAAAA,cAACa,EAAAA,EAAQ,CAACW,IAAKD,GACXvB,EAAAA,cAAC9B,EAAe,CAAC+C,MAAO,CAAEC,SAAU,MAC/BI,UAYzC,aACItB,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,iEACHC,eAAe,eAIvBhB,EAAAA,cAACyB,EAAAA,EAAU,CAAC,aAAW,WAAWd,KAAK,SACjC9B,EACImB,EAAAA,cAAC0B,EAAAA,EAAQ,CAACC,SAAS,UACnB3B,EAAAA,cAAC4B,EAAAA,EAAY,CAACD,SAAS,cAOzD,CAEA,QAAe3B,EAAAA,KAAWxB,GCzKpBqD,EAAgC,SAAUjD,GAC5C,MAAO,CACHkD,eAAgB,CACZC,KAAMA,IAAM,IAAM,KAClBC,aAAcA,IAAM,IAAM,KAC1BC,sBAAuBA,IAAM,IAAM,KACnCC,iBAAmBC,GAAc1D,GACtBuB,EAAAA,cAACxB,EAAa,CAACE,WAAYyD,EAAUxD,SAAUF,EAAOG,KAAMA,KAInF,EAOMwD,EAAa3D,IACf,MAAM,KACFG,EAAI,oBAAEyD,EAAmB,oBAAEC,EAAmB,IAAEC,GAChD9D,EAEE+D,GAAoBC,EAAAA,EAAAA,QAAOhE,EAAMiE,oBACjCC,GAAyBF,EAAAA,EAAAA,QAAOH,IAEtCM,EAAAA,EAAAA,YAAU,KACNJ,EAAkBK,QAAUpE,EAAMiE,kBAAkB,GACrD,CAACjE,EAAMiE,sBAEVE,EAAAA,EAAAA,YAAU,KACND,EAAuBE,QAAUP,CAAmB,GACrD,CAACA,IAEJ,MAAMQ,EAAiB,CACnBlE,OACAmE,aAAc,KACdC,0BAA2B,EAC3BC,aAAc,OACdC,mBAAqBC,IACjB,MAAM,IAAEC,GAAQD,GACV,QAAEE,GAAYd,EACde,EAA4Bd,EAAkBK,QAC9CU,EAAoBZ,EAAuBE,QAC3CW,EAAiB,GAAGH,MAc1B,GAbkC,YAA9BC,EACAH,EAAIM,QAAQF,GAAqBlB,IACI,UAA9BiB,EACPH,EAAIM,QAAQF,GAAqB,SAAWlB,IACP,SAA9BiB,EACPH,EAAIM,QAAQF,GAAqBlB,IAC1BE,EAAImB,eAAiBnB,EAAImB,cAAcC,WAC1CJ,IACAJ,EAAIM,QAAQF,GAAqBlB,KAGrCc,EAAIM,QAAQF,GAAqB,UAAYlB,IAE7Ce,EAAIQ,SAASJ,GACbL,EAAIC,IAAMA,EAAIS,UAAU,EAAGT,EAAIhC,OAAS,QACrC,GAAIgC,EAAIU,SAASN,EAAiB,KAAM,CAC3C,MAAMO,EAAcX,EAAIY,MAAM,OAC9Bb,EAAIC,IAAMW,EAAY3C,OAAS,EAAI2C,EAAY,GAAK,IAAMA,EAAY,GAAKA,EAAY,EAC3F,CACA,OAAOZ,CAAG,EAEdc,yBAA0B,EAC1BC,QAAS,CAACrC,EAA8BjD,MAErCuF,EAAQC,IAAaC,EAAAA,EAAAA,aACrBC,EAAcC,IAAmBF,EAAAA,EAAAA,YAiBxC,OAfAzB,EAAAA,EAAAA,YAAU,KACN,IAAK0B,EAAc,OACnB,MAAME,EAAMC,SAASC,iBAAiB,gCACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIpD,OAAQuD,IAC5BH,EAAIG,GAAGC,SAEXH,SAASI,cAAc,mBAAmBC,aAAa,KAAM,WAC7DL,SAASM,eAAe,YAAYC,WAAWA,WAAWJ,SAC1DL,GAAgB,EAAM,GACvB,CAACD,KAEJ1B,EAAAA,EAAAA,YAAU,KACN2B,GAAgB,EAAK,GACtB,CAACJ,IAGAnE,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACiF,EAAAA,EAAiBnC,GACjBsB,EACF,EAIXhC,EAAU8C,UAAY,CAClB7C,oBAAqB8C,IAAAA,KAAeC,WACpC9C,oBAAqB6C,IAAAA,OAAiBC,WACtC1C,mBAAoByC,IAAAA,OAAiBC,WACrC7C,IAAK4C,IAAAA,MAAgB,CACjB9B,QAAS8B,IAAAA,OAAiBC,aAC3BA,WACHxG,KAAMuG,IAAAA,OAAiBC,YAE3B,U,o/BCjEA,MAAMC,EAAS,aAETC,EAAU,CACZC,QAAS,GAAGF,YACZG,WAAY,GAAGH,eACfI,MAAO,GAAGJ,UACVK,KAAM,GAAGL,SACTM,sBAAuB,GAAGN,0BAC1BO,SAAU,GAAGP,aACbQ,eAAgB,GAAGR,oBAIjBS,GAAOnI,EAAAA,EAAAA,IAAO,MAAPA,EAAcoI,IAAA,IACvB,MACIC,GACHD,EAAA,MACC,CACF,CAAC,MAAMT,EAAQC,WAAY,CACvBU,YAAa,GACbC,KAAM,IAGV,CAAC,MAAMZ,EAAQE,cAAe,CAC1BS,YAAa,IAGjB,CAAC,MAAMX,EAAQG,SAAU,CACrBU,OAAQH,EAAMI,QAAQ,GACtBjI,QAAS6H,EAAMI,QAAQ,IAG3B,CAAC,MAAMd,EAAQI,QAAS,CACpBW,UAAWL,EAAMI,QAAQ,GACzBE,aAAcN,EAAMI,QAAQ,GAC5BjF,aAAc6E,EAAMI,QAAQ,GAC5BhG,eAAgB,UAGpB,CAAC,MAAMkF,EAAQK,yBAA0B,CACrCxH,QAAS6H,EAAMI,QAAQ,IAG3B,CAAC,MAAMd,EAAQM,YAAa,CACxBW,WAAYP,EAAMI,QAAQ,GAC1BpI,WAAYgI,EAAMI,QAAQ,GAC1BtI,cAAekI,EAAMI,QAAQ,GAC7BvI,MAAOmI,EAAMQ,QAAQC,gBAAgBT,EAAMQ,QAAQE,WAAWC,UAGlE,CAAC,MAAMrB,EAAQO,kBAAmB,CAC9Be,gBAAiBZ,EAAMa,OAAOC,eAAeC,qBAEpD,IAQD,MAAMC,UAAmBhH,EAAAA,UAMrBiH,WAAAA,CAAYxI,GACRyI,MAAMzI,GAAO0I,EAAA,eAuXR,KACLC,KAAKC,SAAS,CACVC,WAAW,IAKfC,YAHe,WACXH,KAAKC,SAAS,CAAEC,WAAW,GAC/B,GACmB,IAAK,IA7XxBF,KAAKI,MAAQ,CACT9E,mBAAoB,QACpB+E,SAAU,GACVC,SAAU,GACVnI,OAAQ,GACRoI,gBAAiB,aACjBC,KAAM,GACNC,iBAAkB,GAClBC,cAAe,GACfC,mBAAoB,uBACpBT,WAAW,EACXU,gBAAiBC,EAAAA,EAAMC,4BAA4B,2BACnDC,OAAQ,GACRC,kBAAmB,KACnBC,cAAe,gBACfC,mBAAoB,GACpBC,iBAAkB,cAEtBnB,KAAK/E,oBAAsB+E,KAAK/E,oBAAoBmG,KAAKpB,MACzDA,KAAKqB,cAAgBrB,KAAKqB,cAAcD,KAAKpB,MAC7CA,KAAKsB,kBAAoBtB,KAAKsB,kBAAkBF,KAAKpB,MACrDA,KAAKuB,uBAAyBvB,KAAKuB,uBAAuBH,KAAKpB,MAC/DA,KAAKwB,yBAA2BxB,KAAKwB,yBAAyBJ,KAAKpB,MACnEA,KAAKyB,sBAAwBzB,KAAKyB,sBAAsBL,KAAKpB,MAC7DA,KAAK0B,YAAc1B,KAAK0B,YAAYN,KAAKpB,MACzCA,KAAK2B,YAAc3B,KAAK2B,YAAYP,KAAKpB,MACzCA,KAAK4B,mBAAqB5B,KAAK4B,mBAAmBR,KAAKpB,MACvDA,KAAK6B,oBAAsB7B,KAAK8B,sBAAsBV,KAAKpB,MAC3DA,KAAK+B,QAAU/B,KAAK+B,QAAQX,KAAKpB,MACjCA,KAAKgC,kBAAoBhC,KAAKgC,kBAAkBZ,KAAKpB,MACrDA,KAAKiC,oBAAsBjC,KAAKiC,oBAAoBb,KAAKpB,MACzDA,KAAKkC,iBAAmBlC,KAAKkC,iBAAiBd,KAAKpB,MACnDA,KAAKmC,iBAAmBnC,KAAKoC,iBAAiBhB,KAAKpB,MACnDA,KAAKqC,iBAAmBrC,KAAKqC,iBAAiBjB,KAAKpB,MACnDA,KAAKsC,sBAAwBtC,KAAKsC,sBAAsBlB,KAAKpB,MAC7DA,KAAKuC,oBAAsBvC,KAAKuC,oBAAoBnB,KAAKpB,MACzDA,KAAKwC,OAASxC,KAAKwC,OAAOpB,KAAKpB,KACnC,CAKAyC,iBAAAA,GACI,MAAM,IAAEtH,GAAQ6E,KAAK/D,QACfyG,EAAQvH,EAAIxB,GACZgJ,EAAOC,EAAAA,EAAYC,UACzB,IAAIC,EACAC,EACAC,EACAC,EAGJ,MAAQC,KAAOC,WAAaC,aAAcC,KAA+BC,IACzE,IAAIF,EAAe,GACnB,GAA+B,SAA3BC,EACAD,EAAeC,MACZ,CACH,MAAM,SAAEE,GAAaC,OACrB,GAAID,EAAU,CACV,MAAM,OAAExC,GAAW0C,EAAAA,MAAkBF,EAASG,QAC1C3C,IACAqC,EAAerC,EAEvB,CACJ,CACAf,KAAKC,SAAS,CAAEc,OAAQqC,IACxBpD,KAAK2D,UAAY,IAAIC,EAAAA,EACrB,MAAMC,EAAa7D,KAAK2D,UAAUG,WAAWpB,GAC7C,IAAI1B,EAAoB,KAExB6C,EACKE,MAAMC,IAOH,GANAlB,EAAUkB,EAAYC,IAClBnB,EAAQoB,eACRnB,EAAeD,EAAQoB,aAAajK,KAAKkK,IAC9B,CAAEC,KAAMD,EAASE,gBAAiBC,YAAaH,EAASI,4BAGnEzB,EAAQ3K,OAAQ,CAChB,MAAMM,EAAYqK,EAAQ3K,OAAO8B,KAAKC,GAAmBA,EAAME,MAC/D4F,KAAKC,SAAS,CAAE9H,OAAQM,GAC5B,CACA,OAAIsK,GAAgBA,EAAa/I,OAAS,GACtCgJ,EAAsBD,EAAa,GAAGqB,KACtCpD,EAAoB,kBACbhB,KAAK2D,UAAUa,gCAAgC9B,EAAOM,KAE7DhC,EAAoB,GACbhB,KAAK2D,UAAUc,kBAAkB/B,GAC5C,IAEHqB,MAAMW,IAAoB,IAAAC,EACvB1B,EAAUyB,EAAgBT,IAE1B,IAAIW,EAAwB,QAqB5B,OApBK9B,EAAQ+B,eAAenI,SAAS,YACjCkI,EAAwB9B,EAAQ+B,eAAenI,SAAS,WAAa,UAAY,SAErD,QAAhCiI,EAAI7B,EAAQgC,4BAAoB,IAAAH,GAA5BA,EAA8BI,QAAQrI,SAAS,WAC/CkI,EAAwB,UACnB9B,EAAQ+B,eAAenI,SAAS,aACjCkI,EAAwB9B,EAAQ+B,eAAenI,SAAS,UAAY,QAAU,UAItFsD,KAAKC,SAAS,CACV9E,IAAK2H,EACLG,UACAF,eACAiC,2BA3DRA,EA4DQC,wBA3DRA,EA4DQjC,sBACA1H,mBAAoBsJ,EACpB5D,sBAEQ,MAAR2B,EACO3C,KAAK2D,UAAUuB,iBAAiBxC,GAEhC,IACX,IAEHyC,OAAOC,IAIJ,MAAM,OAAEC,GAAWD,EACJ,MAAXC,GACArF,KAAKC,SAAS,CAAEqF,UAAU,GAC9B,GAEZ,CAMAhE,iBAAAA,CAAkBuD,GACd7E,KAAKC,SAAS,CAAE3E,mBAAoBuJ,GACxC,CAMAtD,sBAAAA,CAAuByB,GACnBhD,KAAKC,SAAS,CAAE+C,uBACpB,CAMAxB,wBAAAA,CAAyBwD,GACrBhF,KAAKC,SAAS,CAAE+E,yBACpB,CAMAvD,qBAAAA,CAAsBwD,GAClBjF,KAAKC,SAAS,CAAEgF,sBACpB,CAMAhD,mBAAAA,CAAoBxB,GAChBT,KAAKC,SAAS,CAAEQ,oBACpB,CAMAyB,gBAAAA,CAAiBxB,GACbV,KAAKC,SAAS,CAAES,iBACpB,CAMAgB,WAAAA,CAAYrB,GACRL,KAAKC,SAAS,CAAEI,YACpB,CAMAsB,WAAAA,CAAYrB,GACRN,KAAKC,SAAS,CAAEK,YACpB,CAMAsB,kBAAAA,CAAmBrB,EAAiBgF,EAAeC,GAC3CD,EACAvF,KAAKC,SAAS,CAAEM,mBAAmBP,KAAKgC,kBAAkBwD,IAE1DxF,KAAKC,SAAS,CAAEM,mBAExB,CAMAuB,qBAAAA,CAAsBnB,EAAoB4E,EAAeC,GACjDD,EACAvF,KAAKC,SAAS,CAAEU,sBAAsBX,KAAKgC,kBAAkBwD,IAE7DxF,KAAKC,SAAS,CAAEU,sBAExB,CAEAoB,OAAAA,CAAQvB,GACJR,KAAKC,SAAS,CAAEO,QACpB,CAMA6B,gBAAAA,CAAiBpB,GACbjB,KAAKC,SAAS,CAAEgB,iBACpB,CAMAqB,qBAAAA,CAAsBpB,GAClBlB,KAAKC,SAAS,CAAEiB,sBACpB,CAMAqB,mBAAAA,CAAoBpB,GAChBnB,KAAKC,SAAS,CAAEkB,oBACpB,CAQAsE,cAAAA,CAAejO,EAAMkO,GACjB,IAAIC,EACJ,MAAOC,EAAUC,GAAQH,EAAU9I,MAAM,OAMzC,MALiB,SAAbgJ,EACAD,EAAU,CAAC,QACS,UAAbC,IACPD,EAAU,CAAC,UAEfG,EAAAA,EAAA,GACOtO,GAAI,IACPmO,UACAE,QAER,CAMAzD,gBAAAA,CAAiB2D,GACbC,IAAAA,QAAyB,CAAEC,KAAM,SAAUC,KAAMH,GAC7C,CAAC,GAAG,CAACI,EAAKC,KACDA,EAAiBC,OAGlBC,IACIC,KAAKC,UAAUJ,EAAiBK,OAAO,GAAGP,MAC1C,sBAJJQ,QAAQC,IAAI,oBAMhB,GAEZ,CAMA3E,iBAAAA,CAAkBwD,GACd,MAAM,gBACFjF,EAAe,mBAAEI,EAAkB,KAAEH,GACrCR,KAAKI,MACT,IAAIwG,EACApG,EAAKqG,IAAIlG,IAAuBH,EAAKqG,IAAIlG,GAAoBmG,UAAYvG,KACtEqG,eAAgBpG,EAAKqG,IAAIlG,GAAoBoG,OACxB,eAApBxG,EACAP,KAAKwB,yBAAyBoF,GAE9B5G,KAAKyB,sBAAsBmF,IAG/BI,EAAAA,EAAYH,IAAIrB,GACXzB,MAAMkD,GACIA,EAAYC,QAAQ3G,KAE9BwD,MAAMoD,IACCA,EAAQN,IAAIlG,IACbwG,EAAQN,IAAIlG,GAAoBmG,UAAYvG,KACxCqG,eAAgBO,EAAQN,IAAIlG,GAAoBoG,OAEP,eAA5CI,EAAQN,IAAIlG,GAAoBmG,QAChC9G,KAAKwB,yBAAyBoF,GAE9B5G,KAAKyB,sBAAsBmF,GAE/B5G,KAAK+B,QAAQoF,EAAQ,GAGrC,CAQAlM,mBAAAA,GACI,MAAM,mBACFK,EAAkB,SAAE+E,EAAQ,SAAEC,EAAQ,sBAAE0E,EAAqB,mBAAEC,EAAkB,gBAAE1E,EAAe,iBAClGE,EAAgB,cAAEC,EAAa,IAAEvF,EAAG,mBAAE+F,GACtClB,KAAKI,MACT,OAAKjF,EAAImB,eAAiBnB,EAAImB,cAAcC,YAAgBpB,EAAIiM,eAAuC,SAAtBjM,EAAIiM,cAC1ElG,EAEgB,UAAvB5F,EAEO+L,KADahH,EAAW,IAAMC,GAGd,YAAvBhF,EACwB,eAApBiF,EACOE,EAEAC,EAEgB,eAApBH,EACAyE,EAEAC,CAEf,CAMA5D,aAAAA,CAAciG,GACV,MAAM,IACFnM,EAAG,aAAE4H,GACL/C,KAAKI,MACT,IAAImH,EAGAA,EADAD,GAAevE,EAAayE,MAAMC,GAAMA,EAAErD,OAASkD,IAClCtH,KAAK2D,UAAUa,gCAAgCrJ,EAAIxB,GAAI2N,GAEvDtH,KAAK2D,UAAUc,kBAAkBtJ,EAAIxB,IAE1D4N,EAAexD,MAAMW,IACjB1E,KAAKC,SAAS,CAAEgD,QAASyB,EAAgBT,KAAM,GAEvD,CAgBAlH,MAAAA,GACI,MAAM,IACF5B,EAAG,SAAEmK,EAAQ,QAAErC,EAAO,mBAAE3H,EAAkB,oBAAE0H,EAAmB,aAAED,EAAY,OAAE5K,EAAM,SACrFkI,EAAQ,SAAEC,EAAQ,sBAAE0E,EAAqB,mBAAEC,EAAkB,gBAAE1E,EAAe,gBAAEK,EAAe,cAC/FF,EAAa,iBAAED,EAAgB,mBAAEE,EAAkB,cAAEM,EAAa,mBAAEC,EAAkB,iBAAEC,EAAgB,UACxGjB,EAAS,OAAEa,EAAM,kBAAEC,GACnBhB,KAAKI,OACH,SAAEmD,GAAaC,OACfb,EAAOC,EAAAA,EAAYC,UACnB6E,EAAkBnB,KAAKC,UAASV,EAAC,CAAC,EAAI7C,IACtC0E,EAAe,iCAAmCC,mBAAmBF,GAG3E,GAAW,MAAPvM,GAA0B,MAAX8H,EACf,OAAOrK,EAAAA,cAACiP,EAAAA,EAAQ,MAEpB,GAAIvC,EACA,MAAO,kBAEX,IAAIwC,GAAkB,EAClB5M,EAAsBC,EAAID,oBAAsBC,EAAID,oBAAsB,gBAC1EC,GAAOA,EAAI0J,iBACXiD,EAAkB3M,EAAI0J,eAAenI,SAAS,WAC1CoL,GAA0C,YAAvBxM,IACnBJ,EAAsBC,EAAI4M,aAAe5M,EAAI4M,aAAe,WAGpE,IAAIC,EAAc/E,EAyBlB,OAxBI9H,EAAImB,eAAiBnB,EAAImB,cAAcC,aACvCrB,EAAsB+F,EAGd+G,EAFJA,EAAYC,QAEGnC,EAAAA,EAAA,GACJ7C,GAAO,GAFO,eAArB9B,EAEc,CACV+G,QAAS,CACL,CAAElM,IAAKb,EAAImB,cAAc6L,iCAKnB,CACVD,QAAS,CACL,CAAElM,IAAKb,EAAImB,cAAc8L,+BAIT,eAArBjH,EACOnB,KAAKyF,eAAeuC,EAAa7M,EAAImB,cAAc6L,+BAEnDnI,KAAKyF,eAAeuC,EAAa7M,EAAImB,cAAc8L,6BAIrExP,EAAAA,cAAC8F,EAAI,KACD9F,EAAAA,cAACyP,EAAAA,EAAK,CAACC,UAAWpK,EAAQG,OACtBzF,EAAAA,cAACC,EAAAA,GAAI,CAACC,WAAS,EAACwP,UAAWpK,EAAQI,OAC7BqE,KAAUxH,EAAImB,gBAAkBnB,EAAImB,cAAcC,aAC5CpB,EAAIiM,eAAuC,SAAtBjM,EAAIiM,eAC7BxO,EAAAA,cAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GACXP,EAAAA,cAACyP,EAAAA,EAAK,CAACC,UAAWpK,EAAQK,uBACtB3F,EAAAA,cAAC2P,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,MAC/B7P,EAAAA,cAAC8P,EAAAA,EAAI,KAAC,QACL,IACD9P,EAAAA,cAACc,EAAAA,EAAgB,CAACC,GAAG,SAASC,eAAe,YAEjDhB,EAAAA,cAAC2P,EAAAA,EAAU,CAACE,UAAU,KAClB7P,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,mCACHC,eAAgB,mLASxChB,EAAAA,cAACC,EAAAA,GAAI,CAACC,WAAS,EAACwP,UAAWpK,EAAQI,MAC/B1F,EAAAA,cAAC+P,EAAAA,EAAgB,CACbrH,kBAAmBtB,KAAKsB,kBACxBhG,mBAAoBA,EACpBiG,uBAAwBvB,KAAKuB,uBAC7ByB,oBAAqBA,EACrBgC,sBAAuBA,EACvBxD,yBAA0BxB,KAAKwB,yBAC/ByD,mBAAoBA,EACpBxD,sBAAuBzB,KAAKyB,sBAC5BwB,QAAS+E,EACTjF,aAAcA,EACd5K,OAAQA,EACRuJ,YAAa1B,KAAK0B,YAClBC,YAAa3B,KAAK2B,YAClBtB,SAAUA,EACVC,SAAUA,EACVsB,mBAAoB5B,KAAK4B,mBACzBrB,gBAAiBA,EACjBuB,sBAAuB9B,KAAK8B,sBAC5BnB,mBAAoBA,EACpBU,cAAerB,KAAKqB,cACpBU,QAAS/B,KAAK+B,QACdE,oBAAqBjC,KAAKiC,oBAC1BC,iBAAkBlC,KAAKkC,iBACvBzB,iBAAkBA,EAClBC,cAAeA,EACf2B,iBAAkBrC,KAAKqC,iBACvBC,sBAAuBtC,KAAKsC,sBAC5BrB,cAAeA,EACfC,mBAAoBA,EACpBqB,oBAAqBvC,KAAKuC,oBAC1BpB,iBAAkBA,EAClBhG,IAAK6E,KAAKI,MAAMjF,IAChByN,KAAM,QAIA,SAAbzN,EAAI8K,MACDrN,EAAAA,cAACC,EAAAA,GAAI,CAACC,WAAS,GACXF,EAAAA,cAACC,EAAAA,GAAI,CAACgQ,GAAI,EAAG3P,MAAI,IACjBN,EAAAA,cAACC,EAAAA,GAAI,CAACgQ,GAAI,EAAG3P,MAAI,GACbN,EAAAA,cAACkQ,EAAAA,EAAM,CAACvP,KAAK,QAAQ9C,MAAM,OAAOsS,QAASA,IAAM/I,KAAKoC,iBAAiBsF,IACnE9O,EAAAA,cAACoQ,EAAAA,GAAK,CAACC,KAAMC,EAAAA,EAAaC,MAAO,GAAIC,OAAQ,GAAId,UAAWpK,EAAQE,aACpExF,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,sDACHC,eAAe,yBAI3BhB,EAAAA,cAACC,EAAAA,GAAI,CAACgQ,GAAI,EAAG3P,MAAI,GACbN,EAAAA,cAAA,KAAGyQ,KAAM1B,EAAc2B,SArH9B,gBAsHW1Q,EAAAA,cAACkQ,EAAAA,EAAM,CAACvP,KAAK,QAAQ9C,MAAM,QACvBmC,EAAAA,cAAC2Q,EAAAA,EAAoB,CAACjB,UAAWpK,EAAQE,aACzCxF,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,sDACHC,eAAe,gCAI3BhB,EAAAA,cAACQ,EAAAA,EAAO,CACJC,MAAO6G,EAECtH,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,kCACHC,eAAe,WAInBhB,EAAAA,cAACc,EAAAA,EAAgB,CACbC,GAAG,6CACHC,eAAe,sBAG3B4P,UAAU,OAEV5Q,EAAAA,cAACkQ,EAAAA,EAAM,CACH,aAAW,oBACXR,UAAWpK,EAAQuL,OACnBhT,MAAM,OACNsS,QAASA,KACLW,UAAUC,UAAUC,UAAUrG,EAASsG,OACjC,6BAA+B1O,EAAIxB,GAAK,wBACxCiH,EAAkB,oBAAsBG,EAAS,IACjDC,EAAoB,IAAMgC,GAAqBe,KAAK/D,KAAKwC,SAAS,GAG5E5J,EAAAA,cAACkR,EAAAA,EAAY,CAACxB,UAAWpK,EAAQE,kBAOzDxF,EAAAA,cAACyP,EAAAA,EAAK,CAACC,UAAWpK,EAAQO,gBACtB7F,EAAAA,cAACoC,EAAS,CACNG,IAAK6E,KAAKI,MAAMjF,IAChBF,oBAAqB+E,KAAK/E,oBAC1BzD,KAAMwQ,EACN9M,oBAAqBA,EACrBI,mBAAoBA,KAKxC,EAGJsE,EAAW9B,UAAY,CACnBI,QAASH,IAAAA,MAAgB,CACrBM,MAAON,IAAAA,OAAiBC,WACxBQ,SAAUT,IAAAA,OAAiBC,WAC3BM,KAAMP,IAAAA,OAAiBC,WACvBO,sBAAuBR,IAAAA,OAAiBC,WACxCI,WAAYL,IAAAA,OAAiBC,WAC7BG,QAASJ,IAAAA,OAAiBC,aAC3BA,YAGP4B,EAAWmK,YAAcC,EAAAA,EAEzB,U","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/CustomPadLock.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport 'swagger-ui-react/swagger-ui.css';\nimport LockIcon from '@mui/icons-material/Lock';\nimport {\n    IconButton, Tooltip, Grid, Table, TableBody, TableCell, TableRow,\n} from '@mui/material';\nimport { FormattedMessage } from 'react-intl';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\nconst StyledTableCell = styled(TableCell)(() => ({\n    color: 'white',\n    paddingBottom: '0',\n    paddingLeft: '0',\n    paddingTop: '0',\n    textAlign: 'left',\n}));\n\nconst StyledScopeCell = styled(TableCell)(() => ({\n    color: 'white',\n    padding: '0',\n    textAlign: 'left',\n    borderBottom: 'none',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n}));\n\n/**\n *\n *\n * @export\n * @param {*} spec\n * @param {*} resourcePath\n * @returns\n */\nfunction isSecurityEnabled(spec, resourcePath) {\n    const operation = resourcePath.reduce((a, v) => a[v], spec);\n    return operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none';\n}\n\n/**\n *\n *\n * @export\n * @param {*} spec\n * @param {*} resourcePath\n * @returns\n */\nfunction getScopesForOperation(spec, resourcePath) {\n    const operation = resourcePath.reduce((a, v) => a[v], spec);\n    const security = operation.security || [];\n    const scopes = [];\n\n    security.forEach((auth) => {\n        Object.values(auth).forEach((scopeList) => {\n            scopes.push(...scopeList);\n        });\n    });\n    return scopes;\n}\n\n/**\n *\n * Handles the resource level lock icon\n * @export\n * @param {*} BaseLayout\n * @param {*} props\n * @param {*} spec\n * @returns\n */\nfunction CustomPadLock(props) {\n    const {\n        BaseLayout, oldProps, spec,\n    } = props;\n    const securityEnabled = useMemo(() => isSecurityEnabled(spec, oldProps.specPath), []);\n    const scopes = useMemo(() => getScopesForOperation(spec, oldProps.specPath), []);\n\n    return (\n        <div>\n            <Grid container direction='row' justifyContent='space-between' alignItems='center'>\n                <Grid item md={11}>\n                    <BaseLayout {...oldProps} />\n                </Grid>\n                <Grid item justifyContent='flex-end' alignItems='right'>\n                    <Tooltip\n                        title={(\n                            <Table size='small'>\n                                <TableBody>\n                                    <TableRow>\n                                        <StyledTableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Resources.components.Operation.security'\n                                                defaultMessage='Security'\n                                            />\n                                        </StyledTableCell>\n                                        <StyledTableCell>\n                                            {securityEnabled\n                                                ? (\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Resources.components.Operation.security.enabled'\n                                                        defaultMessage='Enabled'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Resources.components.Operation.security.disabled'\n                                                        defaultMessage='Disabled'\n                                                    />\n                                                )}\n                                        </StyledTableCell>\n                                    </TableRow>\n                                    {securityEnabled && (\n                                        <TableRow>\n                                            <StyledTableCell>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.scopes'\n                                                    defaultMessage='Scopes'\n                                                />\n                                            </StyledTableCell>\n                                            <StyledTableCell style={{ maxWidth: 100, paddingRight: 0 }}>\n                                                {scopes.length > 0 && (\n                                                    scopes.map((scope, index) => (\n                                                    // eslint-disable-next-line react/no-array-index-key\n                                                        <TableRow key={index}>\n                                                            <StyledScopeCell style={{ maxWidth: 100 }}>\n                                                                {scope}\n                                                            </StyledScopeCell>\n                                                        </TableRow>\n                                                    ))\n                                                )}\n                                            </StyledTableCell>\n                                        </TableRow>\n                                    )}\n\n                                </TableBody>\n                            </Table>\n                        )}\n                        aria-label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.security.operation'\n                                defaultMessage='Security '\n                            />\n                        )}\n                    >\n                        <IconButton aria-label='Security' size='large'>\n                            {(securityEnabled)\n                                ? <LockIcon fontSize='small' />\n                                : <LockOpenIcon fontSize='small' />}\n                        </IconButton>\n                    </Tooltip>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default React.memo(CustomPadLock);\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\nimport CustomPadLock from './CustomPadLock';\n\nconst disableAuthorizeAndInfoPlugin = function (spec) {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n            authorizeOperationBtn: () => () => null,\n            OperationSummary: (original) => (props) => {\n                return <CustomPadLock BaseLayout={original} oldProps={props} spec={spec} />;\n            },\n        },\n    };\n};\n\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api,\n    } = props;\n\n    const securitySchemeRef = useRef(props.securitySchemeType);\n    const authorizationHeaderRef = useRef(authorizationHeader);\n\n    useEffect(() => {\n        securitySchemeRef.current = props.securitySchemeType;\n    }, [props.securitySchemeType]);\n\n    useEffect(() => {\n        authorizationHeaderRef.current = authorizationHeader;\n    }, [authorizationHeader]);\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const currentSecuritySchemeType = securitySchemeRef.current;\n            const currentAuthHeader = authorizationHeaderRef.current;\n            const patternToCheck = `${context}/*`;\n            if (currentSecuritySchemeType === 'API-KEY') {\n                req.headers[currentAuthHeader] = accessTokenProvider();\n            } else if (currentSecuritySchemeType === 'BASIC') {\n                req.headers[currentAuthHeader] = 'Basic ' + accessTokenProvider();\n            } else if (currentSecuritySchemeType === 'TEST') {\n                req.headers[currentAuthHeader] = accessTokenProvider();\n            } else if (api.advertiseInfo && api.advertiseInfo.advertised) {\n                if (currentAuthHeader) {\n                    req.headers[currentAuthHeader] = accessTokenProvider();\n                }\n            } else {\n                req.headers[currentAuthHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin(spec)],\n    };\n    const [render, setRender] = useState();\n    const [layoutRender, setlayoutRender] = useState();\n\n    useEffect(() => {\n        if (!layoutRender) return;\n        const len = document.querySelectorAll('.opblock .authorization__btn');\n        for (let i = 0; i < len.length; i++) {\n            len[i].remove();\n        }\n        document.querySelector('.schemes select').setAttribute('id', 'schemes');\n        document.getElementById('unlocked').parentNode.parentNode.remove();\n        setlayoutRender(false);\n    }, [layoutRender]);\n\n    useEffect(() => {\n        setlayoutRender(true);\n    }, [render]);\n\n    return (\n        <>\n            <SwaggerUILib {...componentProps} />\n            {setRender}\n        </>\n    );\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    securitySchemeType: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Icon from '@mui/material/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport postmanIcon from '@iconify/icons-simple-icons/postman';\nimport { Icon as Icons } from '@iconify/react';\nimport fileDownload from 'js-file-download';\nimport openapiToPostman from 'openapi-to-postmanv2';\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\nimport Tooltip from '@mui/material/Tooltip';\nimport CloudDownloadRounded from '@mui/icons-material/CloudDownloadRounded';\nimport queryString from 'query-string';\nimport Settings from 'Settings';\nimport Utils from 'AppData/Utils';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport TryOutController from '../../../Shared/ApiTryOut/TryOutController';\nimport Application from '../../../../data/Application';\n\nconst PREFIX = 'ApiConsole';\n\nconst classes = {\n    iconify: `${PREFIX}-iconify`,\n    buttonIcon: `${PREFIX}-buttonIcon`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n    swaggerUIPaper: `${PREFIX}-swaggerUIPaper`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.iconify}`]: {\n        marginRight: 10,\n        font: 24,\n    },\n\n    [`& .${classes.buttonIcon}`]: {\n        marginRight: 10,\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n\n    [`& .${classes.swaggerUIPaper}`]: {\n        backgroundColor: theme.custom.apiDetailPages.swaggerUIBackground,\n    },\n}));\n\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n            scopes: [],\n            selectedKeyType: 'PRODUCTION',\n            keys: [],\n            productionApiKey: '',\n            sandboxApiKey: '',\n            selectedKeyManager: 'Resident Key Manager',\n            urlCopied: false,\n            accessTokenPart: Utils.getCookieWithoutEnvironment('WSO2_AM_TOKEN_1_Default'),\n            tenant: '',\n            selectedAttribute: null,\n            advAuthHeader: 'Authorization',\n            advAuthHeaderValue: '',\n            selectedEndpoint: 'PRODUCTION',\n        };\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.setSecurityScheme = this.setSecurityScheme.bind(this);\n        this.setSelectedEnvironment = this.setSelectedEnvironment.bind(this);\n        this.setProductionAccessToken = this.setProductionAccessToken.bind(this);\n        this.setSandboxAccessToken = this.setSandboxAccessToken.bind(this);\n        this.setUsername = this.setUsername.bind(this);\n        this.setPassword = this.setPassword.bind(this);\n        this.setSelectedKeyType = this.setSelectedKeyType.bind(this);\n        this.setSectedKeyManager = this.setSelectedKeyManager.bind(this);\n        this.setKeys = this.setKeys.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.setProductionApiKey = this.setProductionApiKey.bind(this);\n        this.setSandboxApiKey = this.setSandboxApiKey.bind(this);\n        this.converttopostman = this.convertToPostman.bind(this);\n        this.setAdvAuthHeader = this.setAdvAuthHeader.bind(this);\n        this.setAdvAuthHeaderValue = this.setAdvAuthHeaderValue.bind(this);\n        this.setSelectedEndpoint = this.setSelectedEndpoint.bind(this);\n        this.onCopy = this.onCopy.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let selectedEnvironment;\n        let swagger;\n        let productionAccessToken;\n        let sandboxAccessToken;\n        const { app: { customUrl: { tenantDomain: customUrlEnabledDomain } } } = Settings;\n        let tenantDomain = '';\n        if (customUrlEnabledDomain !== 'null') {\n            tenantDomain = customUrlEnabledDomain;\n        } else {\n            const { location } = window;\n            if (location) {\n                const { tenant } = queryString.parse(location.search);\n                if (tenant) {\n                    tenantDomain = tenant;\n                }\n            }\n        }\n        this.setState({ tenant: tenantDomain });\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n        let selectedAttribute = null;\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.key; });\n                    this.setState({ scopes: scopeList });\n                }\n                if (environments && environments.length > 0) {\n                    selectedEnvironment = environments[0].name;\n                    selectedAttribute = 'environmentName';\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else {\n                    selectedAttribute = '';\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n\n                let defaultSecurityScheme = 'OAUTH';\n                if (!apiData.securityScheme.includes('oauth2')) {\n                    defaultSecurityScheme = apiData.securityScheme.includes('api_key') ? 'API-KEY' : 'BASIC';\n                }\n                if (apiData.subtypeConfiguration?.subtype.includes('AIAPI')) {\n                    defaultSecurityScheme = 'API-KEY';\n                    if (!apiData.securityScheme.includes('api_key')) {\n                        defaultSecurityScheme = apiData.securityScheme.includes('oauth2') ? 'OAUTH' : 'BASIC';\n                    }\n                }\n\n                this.setState({\n                    api: apiData,\n                    swagger,\n                    environments,\n                    productionAccessToken,\n                    sandboxAccessToken,\n                    selectedEnvironment,\n                    securitySchemeType: defaultSecurityScheme,\n                    selectedAttribute,\n                });\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Set SecurityScheme value\n     * @memberof ApiConsole\n     */\n    setSecurityScheme(securityScheme) {\n        this.setState({ securitySchemeType: securityScheme });\n    }\n\n    /**\n     * Set Selected Environment\n     * @memberof ApiConsole\n     */\n    setSelectedEnvironment(selectedEnvironment) {\n        this.setState({ selectedEnvironment });\n    }\n\n    /**\n     * Set Production Access Token\n     * @memberof ApiConsole\n     */\n    setProductionAccessToken(productionAccessToken) {\n        this.setState({ productionAccessToken });\n    }\n\n    /**\n     * Set Sandbox Access Token\n     * @memberof ApiConsole\n     */\n    setSandboxAccessToken(sandboxAccessToken) {\n        this.setState({ sandboxAccessToken });\n    }\n\n    /**\n     * Set Production API Key\n     * @memberof ApiConsole\n     */\n    setProductionApiKey(productionApiKey) {\n        this.setState({ productionApiKey });\n    }\n\n    /**\n     * Set Sandbox API Key\n     * @memberof ApiConsole\n     */\n    setSandboxApiKey(sandboxApiKey) {\n        this.setState({ sandboxApiKey });\n    }\n\n    /**\n     * Set Username\n     * @memberof ApiConsole\n     */\n    setUsername(username) {\n        this.setState({ username });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setPassword(password) {\n        this.setState({ password });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyType(selectedKeyType, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyType }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyType });\n        }\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyManager(selectedKeyManager, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyManager }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyManager });\n        }\n    }\n\n    setKeys(keys) {\n        this.setState({ keys });\n    }\n\n    /**\n     * Set authorization header of third party APIs\n     * @param advAuthHeader authorization header\n     */\n    setAdvAuthHeader(advAuthHeader) {\n        this.setState({ advAuthHeader });\n    }\n\n    /**\n     * Set authorization header value of third party APIs\n     * @param advAuthHeaderValue authorization header value\n     */\n    setAdvAuthHeaderValue(advAuthHeaderValue) {\n        this.setState({ advAuthHeaderValue });\n    }\n\n    /**\n     * Set selected endpoint type of third party APIs\n     * @param selectedEndpoint selected endpoint type\n     */\n    setSelectedEndpoint(selectedEndpoint) {\n        this.setState({ selectedEndpoint });\n    }\n\n    /**\n     * Update swagger for properties for Swagger 2.0 third party APIs\n     * @param spec api definition\n     * @param serverUrl server url\n     * @returns {*}\n     */\n    setServersSpec(spec, serverUrl) {\n        let schemes;\n        const [protocol, host] = serverUrl.split('://');\n        if (protocol === 'http') {\n            schemes = ['http'];\n        } else if (protocol === 'https') {\n            schemes = ['https'];\n        }\n        return {\n            ...spec,\n            schemes,\n            host,\n        };\n    }\n\n    /**\n     * Converting an OpenAPI file to a postman collection\n     * @memberof ApiConsole\n   */\n    convertToPostman(fr) {\n        openapiToPostman.convert({ type: 'string', data: fr },\n            {}, (err, conversionResult) => {\n                if (!conversionResult.result) {\n                    console.log('Could not convert');\n                } else {\n                    fileDownload(\n                        JSON.stringify(conversionResult.output[0].data),\n                        'postman collection',\n                    );\n                }\n            });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof TryOutController\n     */\n    updateAccessToken(selectedApplication) {\n        const {\n            selectedKeyType, selectedKeyManager, keys,\n        } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyManager) && keys.get(selectedKeyManager).keyType === selectedKeyType) {\n            ({ accessToken } = keys.get(selectedKeyManager).token);\n            if (selectedKeyType === 'PRODUCTION') {\n                this.setProductionAccessToken(accessToken);\n            } else {\n                this.setSandboxAccessToken(accessToken);\n            }\n        } else {\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(selectedKeyType);\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(selectedKeyManager)\n                    && appKeys.get(selectedKeyManager).keyType === selectedKeyType) {\n                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                    }\n                    if (appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                        this.setProductionAccessToken(accessToken);\n                    } else {\n                        this.setSandboxAccessToken(accessToken);\n                    }\n                    this.setKeys(appKeys);\n                });\n        }\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            securitySchemeType, username, password, productionAccessToken, sandboxAccessToken, selectedKeyType,\n            productionApiKey, sandboxApiKey, api, advAuthHeaderValue,\n        } = this.state;\n        if ((api.advertiseInfo && api.advertiseInfo.advertised) || (api.gatewayVendor && api.gatewayVendor !== 'wso2')) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    /**\n     * Load the swagger file of the given environment\n     * @memberof ApiConsole\n     */\n    updateSwagger(environment) {\n        const {\n            api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (environment && environments.find((e) => e.name === environment)) {\n            promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, environment);\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    onCopy = () => {\n        this.setState({\n            urlCopied: true,\n        });\n        const caller = function () {\n            this.setState({ urlCopied: false });\n        };\n        setTimeout(caller, 2000);\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const {\n            api, notFound, swagger, securitySchemeType, selectedEnvironment, environments, scopes,\n            username, password, productionAccessToken, sandboxAccessToken, selectedKeyType, accessTokenPart,\n            sandboxApiKey, productionApiKey, selectedKeyManager, advAuthHeader, advAuthHeaderValue, selectedEndpoint,\n            urlCopied, tenant, selectedAttribute,\n        } = this.state;\n        const { location } = window;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n        if (notFound) {\n            return 'API Not found !';\n        }\n        let isApiKeyEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = api.apiKeyHeader ? api.apiKeyHeader : 'ApiKey';\n            }\n        }\n        let swaggerSpec = swagger;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            authorizationHeader = advAuthHeader;\n            if (swaggerSpec.openapi) {\n                if (selectedEndpoint === 'PRODUCTION') {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalProductionEndpoint },\n                        ],\n                    };\n                } else {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalSandboxEndpoint },\n                        ],\n                    };\n                }\n            } else if (selectedEndpoint === 'PRODUCTION') {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalProductionEndpoint);\n            } else {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return (\n            <Root>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised)\n                            && (api.gatewayVendor && api.gatewayVendor !== 'wso2') && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>info</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                    </Grid>\n                    <Grid container className={classes.grid}>\n                        <TryOutController\n                            setSecurityScheme={this.setSecurityScheme}\n                            securitySchemeType={securitySchemeType}\n                            setSelectedEnvironment={this.setSelectedEnvironment}\n                            selectedEnvironment={selectedEnvironment}\n                            productionAccessToken={productionAccessToken}\n                            setProductionAccessToken={this.setProductionAccessToken}\n                            sandboxAccessToken={sandboxAccessToken}\n                            setSandboxAccessToken={this.setSandboxAccessToken}\n                            swagger={swaggerSpec}\n                            environments={environments}\n                            scopes={scopes}\n                            setUsername={this.setUsername}\n                            setPassword={this.setPassword}\n                            username={username}\n                            password={password}\n                            setSelectedKeyType={this.setSelectedKeyType}\n                            selectedKeyType={selectedKeyType}\n                            setSelectedKeyManager={this.setSelectedKeyManager}\n                            selectedKeyManager={selectedKeyManager}\n                            updateSwagger={this.updateSwagger}\n                            setKeys={this.setKeys}\n                            setProductionApiKey={this.setProductionApiKey}\n                            setSandboxApiKey={this.setSandboxApiKey}\n                            productionApiKey={productionApiKey}\n                            sandboxApiKey={sandboxApiKey}\n                            setAdvAuthHeader={this.setAdvAuthHeader}\n                            setAdvAuthHeaderValue={this.setAdvAuthHeaderValue}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            setSelectedEndpoint={this.setSelectedEndpoint}\n                            selectedEndpoint={selectedEndpoint}\n                            api={this.state.api}\n                            URLs={null}\n                        />\n                    </Grid>\n\n                    {api.type !== 'SOAP' && (\n                        <Grid container>\n                            <Grid xs={7} item />\n                            <Grid xs={2} item>\n                                <Button size='small' color='grey' onClick={() => this.convertToPostman(downloadSwagger)}>\n                                    <Icons icon={postmanIcon} width={30} height={30} className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIConsole.APIConsole.download.postman'\n                                        defaultMessage='Postman collection'\n                                    />\n                                </Button>\n                            </Grid>\n                            <Grid xs={3} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small' color='grey'>\n                                        <CloudDownloadRounded className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='Swagger ( /swagger.json )'\n                                        />\n                                    </Button>\n                                </a>\n                                <Tooltip\n                                    title={urlCopied\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Swagger.URL.copied'\n                                                defaultMessage='Copied'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Swagger.URL.copy.to.clipboard'\n                                                defaultMessage='Copy to clipboard'\n                                            />\n                                        )}\n                                    placement='top'\n                                >\n                                    <Button\n                                        aria-label='Copy to clipboard'\n                                        className={classes.button}\n                                        color='grey'\n                                        onClick={() => {\n                                            navigator.clipboard.writeText(location.origin\n                                                + '/api/am/devportal/v3/apis/' + api.id + '/swagger?accessToken='\n                                                + accessTokenPart + '&X-WSO2-Tenant-Q=' + tenant + '&'\n                                                + selectedAttribute + '=' + selectedEnvironment).then(this.onCopy());\n                                        }}\n                                    >\n                                        <FileCopyIcon className={classes.buttonIcon} />\n                                    </Button>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Paper>\n                <Paper className={classes.swaggerUIPaper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swaggerSpec}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </Root>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        iconify: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default (ApiConsole);\n"],"names":["StyledTableCell","styled","TableCell","color","paddingBottom","paddingLeft","paddingTop","textAlign","StyledScopeCell","padding","borderBottom","overflow","textOverflow","whiteSpace","CustomPadLock","props","BaseLayout","oldProps","spec","securityEnabled","useMemo","resourcePath","operation","reduce","a","v","toLowerCase","isSecurityEnabled","specPath","scopes","security","forEach","auth","Object","values","scopeList","push","getScopesForOperation","React","Grid","container","direction","justifyContent","alignItems","item","md","Tooltip","title","Table","size","TableBody","TableRow","FormattedMessage","id","defaultMessage","style","maxWidth","paddingRight","length","map","scope","index","key","IconButton","LockIcon","fontSize","LockOpenIcon","disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","authorizeOperationBtn","OperationSummary","original","SwaggerUI","accessTokenProvider","authorizationHeader","api","securitySchemeRef","useRef","securitySchemeType","authorizationHeaderRef","useEffect","current","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","currentSecuritySchemeType","currentAuthHeader","patternToCheck","headers","advertiseInfo","advertised","endsWith","substring","includes","splitTokens","split","defaultModelExpandDepth","plugins","render","setRender","useState","layoutRender","setlayoutRender","len","document","querySelectorAll","i","remove","querySelector","setAttribute","getElementById","parentNode","SwaggerUILib","propTypes","PropTypes","isRequired","PREFIX","classes","iconify","buttonIcon","paper","grid","userNotificationPaper","titleSub","swaggerUIPaper","Root","_ref","theme","marginRight","font","margin","spacing","marginTop","marginBottom","marginLeft","palette","getContrastText","background","default","backgroundColor","custom","apiDetailPages","swaggerUIBackground","ApiConsole","constructor","super","_defineProperty","this","setState","urlCopied","setTimeout","state","username","password","selectedKeyType","keys","productionApiKey","sandboxApiKey","selectedKeyManager","accessTokenPart","Utils","getCookieWithoutEnvironment","tenant","selectedAttribute","advAuthHeader","advAuthHeaderValue","selectedEndpoint","bind","updateSwagger","setSecurityScheme","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","setUsername","setPassword","setSelectedKeyType","setSectedKeyManager","setSelectedKeyManager","setKeys","updateAccessToken","setProductionApiKey","setSandboxApiKey","converttopostman","convertToPostman","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","onCopy","componentDidMount","apiID","user","AuthManager","getUser","apiData","environments","selectedEnvironment","swagger","app","customUrl","tenantDomain","customUrlEnabledDomain","Settings","location","window","queryString","search","apiClient","Api","promiseAPI","getAPIById","then","apiResponse","obj","endpointURLs","endpoint","name","environmentName","displayName","environmentDisplayName","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIId","swaggerResponse","_apiData$subtypeConfi","defaultSecurityScheme","securityScheme","subtypeConfiguration","subtype","productionAccessToken","sandboxAccessToken","getSubscriptions","catch","error","status","notFound","isUpdateToken","selectedApplication","setServersSpec","serverUrl","schemes","protocol","host","_objectSpread","fr","openapiToPostman","type","data","err","conversionResult","result","fileDownload","JSON","stringify","output","console","log","accessToken","get","keyType","token","Application","application","getKeys","appKeys","gatewayVendor","btoa","environment","promiseSwagger","find","e","downloadSwagger","downloadLink","encodeURIComponent","Progress","isApiKeyEnabled","apiKeyHeader","swaggerSpec","openapi","servers","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","Paper","className","Typography","variant","component","Icon","TryOutController","URLs","xs","Button","onClick","Icons","icon","postmanIcon","width","height","href","download","CloudDownloadRounded","placement","button","navigator","clipboard","writeText","origin","FileCopyIcon","contextType","ApiContext"],"sourceRoot":""}