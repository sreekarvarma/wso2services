{"version":3,"file":"6158.dd6ef497350cb00c1bfb.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenExchangeKeyConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/RemoveKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/CleanKeys.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ScopeValidation.jsx","webpack://@wso2apim/devportal/./source/src/app/data/Subscription.jsx","webpack://@wso2apim/devportal/./source/src/app/data/Validation.jsx"],"sourcesContent":["/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport Typography from '@mui/material/Typography';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport PlayForWorkIcon from '@mui/icons-material/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Settings from 'AppComponents/Shared/SettingsContext';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const [isOrgWideAppUpdateEnabled, setIsOrgWideAppUpdateEnabled] = useState(false);\n    const settingsContext = useContext(Settings);\n\n    /**\n     * Updates isOrgWideAppUpdateEnabled whenever settingsContext changes\n     */\n    useEffect(() => {\n        const orgWideAppUpdateEnabled = settingsContext.settings.orgWideAppUpdateEnabled;\n        setIsOrgWideAppUpdateEnabled(orgWideAppUpdateEnabled);\n    }, [settingsContext]);\n\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl variant=\"standard\">\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl variant=\"standard\">\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isOrgWideAppUpdateEnabled && !isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\nimport FileCopy from '@mui/icons-material/FileCopy';\nimport Tooltip from '@mui/material/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport IconButton from \"@mui/material/IconButton\";\n\nconst PREFIX = 'ViewCurl';\n\nconst classes = {\n    code: `${PREFIX}-code`,\n    command: `${PREFIX}-command`,\n    encodeVisible: `${PREFIX}-encodeVisible`,\n    contentWrapper: `${PREFIX}-contentWrapper`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.code}`]: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n\n    [`& .${classes.command}`]: {\n        color: '#2b62b0',\n    },\n\n    [`& .${classes.encodeVisible}`]: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n\n    [`& .${classes.contentWrapper}`]: {\n        display: 'flex',\n    }\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyManagerConfig,\n        jwtToken,\n        defaultTokenEndpoint,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    if (keyManagerConfig.alias === null ) {\n        return (\n            <Root>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help'\n                        defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                    />\n                </Typography>\n\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=password&username=Username&password=Password\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <IconButton\n                                id = 'copy-to-clipbord-icon'\n                                aria-label='Copy to clipboard'\n                                size=\"large\"\n                                onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${tokenEndpoint} -d ` +\n                                    '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                            >\n                                <FileCopy color='secondary'/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                        defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                    />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=client_credentials\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <IconButton\n                                id = 'copy-to-clipbord-icon'\n                                aria-label='Copy to clipboard'\n                                size=\"large\"\n                                onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${tokenEndpoint} -d ` +\n                                    '\"grant_type=client_credentials\" -H ' +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                            >\n                                <FileCopy color='secondary'/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            </Root>\n        );\n    } else {\n        if (consumerKey === false) {\n            return (\n                <Root>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.error'\n                            defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                             order to use the token Exchange Approach. '\n                        />\n                    </Typography>\n                </Root>\n                )\n        } else {\n            return (\n                <Root>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.TokenExchange.help'\n                            defaultMessage='The following cURL command shows how to generate an access token using the\n                        token exchange grant type'\n                        />\n                    </Typography>\n\n                    <div className={classes.contentWrapper}>\n                        <div className={classes.code}>\n                            <div>\n                                <span className={classes.command}>curl -k -X POST </span> {defaultTokenEndpoint}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" '}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token=\"'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + jwtToken : 'jwtToken'}\n                                </a>\n                            </div>\n                            <div>\n                                <span className={classes.command}> -H </span>\n                                {'\"Authorization: Basic'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                                </a>\n                                {'\"'}\n                            </div>\n                        </div>\n                        <div>\n                            <Tooltip\n                                title={\n                                    tokenCopied\n                                        ? intl.formatMessage({\n                                            defaultMessage: 'Copied',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                        })\n                                        : intl.formatMessage({\n                                            defaultMessage: 'Copy to clipboard',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                        })\n                                }\n                                placement='right'\n                            >\n                                <IconButton\n                                    id = 'copy-to-clipbord-icon'\n                                    aria-label='Copy to clipboard'\n                                    size=\"large\"\n                                    onClick={() => {navigator.clipboard.writeText(`curl -k -X POST ${defaultTokenEndpoint} -d ` +\n                                        '\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" -d ' +\n                                        '\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                        '\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                        `\"subject_token=${jwtToken}\"  -H ` +\n                                        `\"Authorization: Basic ${bas64Encoded}\"`).then(onCopy())}}\n                                >\n                                    <FileCopy color='secondary'/>\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </Root>\n            );\n        }\n    }\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n    jwtToken: PropTypes.string,\n    defaultTokenEndpoint: PropTypes.string,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {useReducer, useState} from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport ViewCurl from \"AppComponents/Shared/AppsAndKeys/ViewCurl\";\nimport ViewToken from \"AppComponents/Shared/AppsAndKeys/ViewToken\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport Application from \"AppData/Application\";\nimport Loading from \"AppComponents/Base/Loading/Loading\";\nimport Alert from \"AppComponents/Shared/Alert\";\nimport Tokens from \"AppComponents/Shared/AppsAndKeys/Tokens\";\nimport {TableBody, TableCell, TableRow} from \"@mui/material\";\nimport Table from \"@mui/material/Table\";\n\nconst PREFIX = 'TokenExchangeKeyConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    generateWrapper: `${PREFIX}-generateWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`,\n    iconStyle: `${PREFIX}-iconStyle`,\n    iconButton: `${PREFIX}-iconButton`,\n    titleColumn: `${PREFIX}-titleColumn`,\n    keyInfoTable: `${PREFIX}-keyInfoTable`,\n    leftCol: `${PREFIX}-leftCol`,\n    stepLabel: `${PREFIX}-stepLabel`,\n    stepContent: `${PREFIX}-stepContent`,\n    keyLabel: `${PREFIX}-keyLabel`,\n    idpGrid: `${PREFIX}-idpGrid`,\n    helperTextError: `${PREFIX}-helperTextError`,\n    input: `${PREFIX}-input`,\n    avatar: `${PREFIX}-avatar`,\n    copyIconStyle: `${PREFIX}-copyIconStyle`,\n    hr: `${PREFIX}-hr`,\n    divCenter: `${PREFIX}-divCenter`,\n    tableHeader: `${PREFIX}-tableHeader`,\n    helperText: `${PREFIX}-helperText`,\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n    margin: `${PREFIX}-margin`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    inputWrapper: `${PREFIX}-inputWrapper`,\n    bottomInfo: `${PREFIX}-bottomInfo`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.FormControl}`]: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n\n    [`& .${classes.FormControlOdd}`]: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.quotaHelp}`]: {\n        position: 'relative',\n    },\n\n    [`& .${classes.checkboxWrapper}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.generateWrapper}`]: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n\n    [`& .${classes.checkboxWrapperColumn}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n\n    [`& .${classes.group}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.removeHelperPadding}`]: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n\n    [`& .${classes.titleColumn}`]: {\n        width: 150,\n        fontWeight: 500,\n    },\n\n    [`& .${classes.keyInfoTable}`]: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    },\n\n    [`& .${classes.stepLabel}`]: {\n        color: \"#5567d5\",\n        alignSelf: 'center',\n    },\n\n    [`& .${classes.stepContent}`]: {\n        color: '#1D2028',\n        fontSize: '0.75rem',\n    },\n\n    [`& .${classes.keyLabel}`]: {\n        color: '#222228',\n        fontSize: '0.75rem',\n        marginLeft: theme.spacing(1)\n    },\n\n    [`& .${classes.idpGrid}`]: {\n        textAlign: 'left',\n        margin: theme.spacing(0),\n        alignSelf: 'center',\n    },\n\n    [`& .${classes.helperTextError}`]: {\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: 10.5\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.avatar}`]: {\n        width: 30,\n        height: 30,\n        background: 'transparent',\n        border: `solid 1px ${theme.palette.grey[300]}`\n    },\n\n    [`& .${classes.copyIconStyle}`]: {\n        cursor: 'pointer',\n        margin: '-10px 0',\n        padding: '0 0 0 5px',\n        '& .material-icons': {\n            fontSize: 18,\n            color: '#9c9c9c',\n        },\n    },\n\n    [`& .${classes.hr}`]: {\n        border: 'solid 1px #efefef',\n    },\n\n    [`& .${classes.divCenter}`]: {\n        alignSelf: 'center',\n        width: 180\n    },\n\n    [`& .${classes.tableHeader}`]: {\n        borderBottom: 'none',\n\n    },\n\n    [`& .${classes.helperText}`]: {\n        marginLeft: 0,\n        color: '#8D91A3',\n        lineHeight: 1.6,\n        maxWidth: 410\n    },\n\n    [`& .${classes.dialogWrapper}`]: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n\n    [`& .${classes.inputWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.bottomInfo}`]: {\n        fontSize: 12,\n        marginBottom: '10px',\n    }\n}));\n\nfunction reducer(state, newValue) {\n    const {field, value} = newValue;\n    switch (field) {\n        case 'tokenResponse':\n        case 'token':\n        case 'tokenScopes':\n        case 'tokenValidityTime':\n        case 'accessTokenRequest':\n        case 'subscriptionScopes':\n        case 'externalIDPToken':\n        case 'externalIDPTokenError':\n        case 'isKeyJWT':\n        case 'initialExecution':\n            return {...state, [field]: value};\n        case 'all':\n            return value;\n        default:\n            return newValue;\n    }\n}\n\n\n/**\n *\n *\n * @class TokenExchangeKeyConfiguration\n * @extends {React.Component}\n */\nconst TokenExchangeKeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [showCS, setShowCS] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [showToken, setShowToken] = useState(false);\n    const [showCurl, setShowCurl] = useState(false);\n    const [showSecretGen, setShowSecretGen] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isResidenceTokenAvailable, setIsResidenceTokenAvailable] = useState(true);\n\n\n    const [initialState] = useState({\n        tokenResponse: '',\n        token: '',\n        tokenScope: '',\n        tokenValidityTime: '',\n        accessTokenRequest: {\n            timeout: 3600,\n            scopesSelected: [],\n            keyType: '',\n        },\n        subscriptionScopes: [],\n        externalIDPToken: '',\n        externalIDPTokenError: '',\n        isKeyJWT: false,\n        initialExecution: true,\n    });\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const {\n        tokenResponse, accessTokenRequest, externalIDPToken, externalIDPTokenError, subscriptionScopes,\n        tokenValidityTime, token, isKeyJWT, initialExecution\n    } = state\n\n    const intl = useIntl();\n\n    const {\n        keyManagerConfig, defaultTokenEndpoint, selectedApp, selectedTab, selectedApp: {hashEnabled}, keys, fullScreen, keyType\n    } = props;\n\n    let appId;\n    if (selectedApp) {\n        appId = selectedApp.appId || selectedApp.value;\n    }\n\n    const applicationPromise = Application.get(appId);\n\n    if (initialExecution) {\n        applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = {...accessTokenRequest, keyType};\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => {\n                            return scope.key;\n                        });\n                    dispatch({field: 'accessTokenRequest', value: newRequest});\n                    dispatch({field: 'subscriptionScopes', value: subscriptionScopes});\n                    dispatch({field: 'initialExecution', value: false});\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                }\n                dispatch({field: 'initialExecution', value: false});\n            });\n    }\n\n    const generateAccessToken = () => {\n        setIsUpdating(true);\n        applicationPromise.then((application) => application.generateToken(\n            selectedTab,\n            accessTokenRequest.keyType,\n            accessTokenRequest.timeout,\n            accessTokenRequest.scopesSelected,\n            true,\n            externalIDPToken,\n        ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                setShowToken(true);\n                dispatch({field: 'tokenResponse', value: response});\n                dispatch({field: 'token', value: response.accessToken});\n                dispatch({field: 'tokenScopes', value: response.tokenScopes})\n                dispatch({field: 'tokenValidityTime', value: response.validityTime})\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                setIsUpdating(false);\n                const {response} = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    let dialogHead;\n    if (showCurl) {\n        dialogHead = 'Get CURL to Generate Access Token';\n    } else if (showSecretGen) {\n        dialogHead = 'Generate Consumer Secret';\n    } else {\n        dialogHead = 'Generate Access Token';\n    }\n\n    const validateExternalIDPToken = (token) => {\n        if (token === \"\") {\n            return (\n                <FormattedMessage\n                    id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.empty.helperText'\n                    defaultMessage={`{selectedIdPType} token cannot be empty`}\n                    values={{selectedIdPType: keyManagerConfig.type}}\n\n                />\n            );\n        }\n        {\n            return \"\";\n        }\n    };\n\n    const onExternalIDPTokenChange = (event) => {\n        const externalIDPToken = event.target.value;\n        dispatch({field: 'externalIDPTokenError', value: validateExternalIDPToken(externalIDPToken)})\n        dispatch({field: 'externalIDPToken', value: externalIDPToken})\n    };\n\n\n    if (notFound) {\n        return <ResourceNotFound/>;\n    }\n    if (!keys) {\n        return <Loading/>;\n    }\n\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    const updateAccessTokenRequest = (accessTokenRequest) => {\n        dispatch({field: 'accessTokenRequest', value: accessTokenRequest})\n    }\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    const handleClose = () => {\n        setOpen(false);\n        setShowCurl(false);\n        setShowSecretGen(false);\n        dispatch({field: \"isKeyJWT\", value: false})\n\n    };\n\n    /**\n     * Handle on open of dialog for generating access token\n     * */\n    const handleClickOpen = () => {\n            setOpen(true);\n    };\n    /**\n     * Handle on open of dialog for generating access token and get curl\n     * */\n    const handleClickOpenCurl = () => {\n        setOpen(true);\n        setShowCurl(true)\n    };\n\n\n    const csCkKeys = keys.size > 0 && keys.get(\"Resident Key Manager\") && (keys.get(\"Resident Key Manager\").keyType === keyType)\n        && keys.get(\"Resident Key Manager\") || false;\n    const consumerKey = csCkKeys && csCkKeys.consumerKey;\n    const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n    return (\n        <Root>\n                    <Box display='flex' alignItems='center'>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.externalIdp.tokenGeneration.step1\"\n                                            defaultMessage=\"Step 1:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.step1.description'\n                                            defaultMessage={`Obtain an access token from {selectedIdpType}. `}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.audience'\n                                            defaultMessage='Use the audience value \"{allowedAudience}\", '\n                                            values={{allowedAudience: <b>{keyManagerConfig.alias}</b>}}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint'\n                                            defaultMessage='Token Endpoint'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint.value'\n                                            defaultMessage={'{tokenEndpoint}'}\n                                            values={{tokenEndpoint: keyManagerConfig.tokenEndpoint}}\n                                        />\n\n                                        <Tooltip\n                                            title={\n                                                urlCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copy.to.clipboard',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{root: classes.iconButton}}\n                                                size=\"large\"\n                                                onClick={() => {navigator.clipboard.writeText(keyManagerConfig.tokenEndpoint).then(onCopy())}}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.tokenGeneration.step2\"\n                                            defaultMessage=\"Step 2:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenGeneration.step2.description'\n                                            defaultMessage='Obtain test token'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token'\n                                            defaultMessage={`{selectedIdpType} Token`}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n                                        <span className={classes.error}> *</span>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box maxWidth={600}>\n                                            <TextField\n                                                id='external-idp-token'\n                                                onChange={onExternalIDPTokenChange}\n                                                size=\"small\"\n                                                fullWidth\n                                                rows={1}\n                                                value={externalIDPToken}\n                                                variant=\"outlined\"\n                                                error={externalIDPTokenError !== \"\"}\n                                                FormHelperTextProps={{\n                                                    className: classes.helperText\n                                                }}\n                                                helperText={externalIDPTokenError === \"\" ?\n                                                    externalIDPTokenError :\n                                                    <div className={classes.helperTextError}>\n                                                        <p> {externalIDPTokenError} </p>\n                                                    </div>\n                                                }\n                                                className={classes.textField}\n                                                data-testid='external-idp-token'\n                                            />\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Box>\n                    <Box>\n                        <div className={classes.inputWrapper}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Dialog\n                                        fullScreen={fullScreen}\n                                        open={open}\n                                        onClose={handleClose}\n                                        aria-labelledby='responsive-dialog-title'\n                                        className={classes.dialogWrapper}\n                                    >\n                                        <DialogTitle id='responsive-dialog-title'>\n                                            {dialogHead}\n                                        </DialogTitle>\n                                        <DialogContent>\n                                            {(!showCurl && !isKeyJWT && !showSecretGen) && (\n                                                <DialogContentText>\n                                                    {(!showToken && isResidenceTokenAvailable) && (\n                                                        <Tokens\n                                                            updateAccessTokenRequest={updateAccessTokenRequest}\n                                                            accessTokenRequest={accessTokenRequest}\n                                                            subscriptionScopes={subscriptionScopes}\n                                                        />\n                                                    )}\n                                                    {(!showToken && !isResidenceTokenAvailable) && (\n                                                        <React.Fragment>\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                                />\n                                                            </Typography>\n                                                        </React.Fragment>\n                                                    )}\n                                                    {showToken &&\n                                                    <ViewToken token={{...tokenResponse, isOauth: true}} isResidenceTokenAvailable={isResidenceTokenAvailable} isTokenExchange />}\n                                                </DialogContentText>\n                                            )}\n                                            {showCurl && (\n                                                <DialogContentText>\n                                                    <ViewCurl\n                                                        keys={{consumerKey, consumerSecret}}\n                                                        keyType={keyType}\n                                                        jwtToken={externalIDPToken}\n                                                        keyManagerConfig={keyManagerConfig}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </DialogContentText>\n                                            )}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            {isUpdating && <CircularProgress size={24}/>}\n                                            {(!showToken && !showCurl && !showSecretGen && isResidenceTokenAvailable) && (\n                                                <Button onClick={generateAccessToken} color='primary'\n                                                        disabled={isUpdating}>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                                        defaultMessage='Generate'\n                                                    />\n                                                </Button>\n                                            )}\n                                            <Button onClick={handleClose} color='primary' autoFocus>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                    defaultMessage='Close'\n                                                />\n                                            </Button>\n                                        </DialogActions>\n                                    </Dialog>\n                                    <div className={classes.generateWrapper}>\n                                        <Grid className={classes.bottomInfo}>\n                                            <FormattedMessage\n                                                id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.description'\n                                                defaultMessage={`In Exchange token flow, A JWT token has to be generated from the {selectedIdpType}\n                                             idp and then exchange for a token with the Resident Key Manager which can used to invoke APIs`}\n                                                values={{selectedIdpType: keyManagerConfig.type}}\n                                            />\n                                        </Grid>\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpen}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                        <Button\n                                            id='curl-to-generate-access-token-btn'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpenCurl}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                                defaultMessage='CURL to Generate Access Token'\n                                            />\n                                        </Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Box>\n        </Root>\n    );\n}\nTokenExchangeKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    fullScreen: false,\n    summary: false,\n};\nTokenExchangeKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    defaultTokenEndpoint: PropTypes.string,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }),\n};\n\n\nexport default (TokenExchangeKeyConfiguration);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport Chip from '@mui/material/Chip';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@mui/material/Select';\nimport Input from '@mui/material/Input';\nimport Box from '@mui/material/Box';\nimport ChipInput from 'AppComponents/Shared/ChipInput';\nimport Settings from 'AppComponents/Shared/SettingsContext';\n\n\nconst PREFIX = 'AppConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')(\n    ({ theme }) => ({\n        display: 'contents',\n        [`& .${classes.FormControl}`]: {\n            paddingTop: theme.spacing(2),\n            paddingBottom: theme.spacing(2),\n            paddingLeft: 0,\n            width: '100%',\n        },\n\n        [`& .${classes.FormControlOdd}`]: {\n            padding: theme.spacing(2),\n            width: '100%',\n        },\n\n        [`& .${classes.button}`]: {\n            marginLeft: theme.spacing(1),\n        },\n\n        [`& .${classes.quotaHelp}`]: {\n            position: 'relative',\n        },\n\n        [`& .${classes.checkboxWrapper}`]: {\n            display: 'flex',\n        },\n\n        [`& .${classes.checkboxWrapperColumn}`]: {\n            display: 'flex',\n            flexDirection: 'row',\n        },\n\n        [`& .${classes.group}`]: {\n            flexDirection: 'row',\n        },\n\n        [`& .${classes.removeHelperPadding}`]: {\n            '& p': {\n                margin: '8px 0px',\n            },\n        }\n    })\n);\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n    const [isOrgWideAppUpdateEnabled, setIsOrgWideAppUpdateEnabled] = useState(false);\n    const settingsContext = useContext(Settings);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain',\n            defaultMessage: 'Support PKCE Plain text',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials',\n            defaultMessage: 'Public client',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory.tooltip',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain.tooltip',\n            defaultMessage: 'S256 is recommended, plain text too can be used.',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials.tooltip',\n            defaultMessage: 'Allow authentication without the client secret.',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n        const orgWideAppUpdateEnabled = settingsContext.settings.orgWideAppUpdateEnabled;\n        setIsOrgWideAppUpdateEnabled(orgWideAppUpdateEnabled);\n    }, [previousValue, settingsContext]);\n\n    const setCheckboxValue = () => {\n        return ( typeof selectedValue === 'string' && selectedValue === 'true' )\n            || ( typeof selectedValue !== 'string' && selectedValue === true );\n    }\n\n    return (\n        <Root>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n\n                        {config.type === 'select' && config.multiple === false ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                select\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                size='small'\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                            >\n                                {config.values.map(key => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                            <>\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                    <Select\n                                        variant=\"standard\"\n                                        labelId=\"multi-select-label\"\n                                        id=\"multi-select-outlined\"\n                                        margin='dense'\n                                        displayEmpty\n                                        name={config.name}\n                                        multiple\n                                        value={selectedValue}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        input={<Input id='multi-select-outlined'/>}\n                                        renderValue={selected => (\n                                            <div className={classes.chips}>\n                                                {selected.map(value => (\n                                                    <Chip key={value} label={value} className={classes.chip}/>\n                                                ))}\n                                            </div>\n                                        )}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        label={getAppConfigLabel()}\n                                    >\n                                        {config.values.map(key => (\n                                            <MenuItem key={key} value={key}>\n                                                <Checkbox checked={selectedValue.indexOf(key) > -1}/>\n                                                <ListItemText primary={key}/>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n\n                                <Typography variant='caption'>\n                                    {getAppConfigToolTip()}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input' && config.multiple === true) ? (\n                            <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = { target: { name:config.name, value: [...selectedValue, tag] } }\n                                    handleAppRequestChange(e)\n                                }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = { target: { name:config.name, value:selectedValue.filter (\n                                            (oldScope)=> oldScope !== value) } }\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            marginRight: '8px',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input') ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                            />\n                        ) : (config.type === 'checkbox') ? (\n                            <Checkbox\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                checked={setCheckboxValue()}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                            />\n                        ) : (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                            />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n        </Root>\n    );\n};\n\nAppConfiguration.contextType = Settings;\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl((AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport TextField from '@mui/material/TextField';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\nimport ContextSettings from 'AppComponents/Shared/SettingsContext';\n\nconst PREFIX = 'KeyConfiguration';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`,\n    FormControlOdd: `${PREFIX}-FormControlOdd`,\n    button: `${PREFIX}-button`,\n    quotaHelp: `${PREFIX}-quotaHelp`,\n    checkboxWrapper: `${PREFIX}-checkboxWrapper`,\n    checkboxWrapperColumn: `${PREFIX}-checkboxWrapperColumn`,\n    group: `${PREFIX}-group`,\n    removeHelperPadding: `${PREFIX}-removeHelperPadding`,\n    iconStyle: `${PREFIX}-iconStyle`,\n    iconButton: `${PREFIX}-iconButton`,\n    titleColumn: `${PREFIX}-titleColumn`,\n    keyInfoTable: `${PREFIX}-keyInfoTable`,\n    leftCol: `${PREFIX}-leftCol`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.FormControl}`]: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n\n    [`& .${classes.FormControlOdd}`]: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.quotaHelp}`]: {\n        position: 'relative',\n    },\n\n    [`& .${classes.checkboxWrapper}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.checkboxWrapperColumn}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n\n    [`& .${classes.group}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.removeHelperPadding}`]: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n\n    [`& .${classes.titleColumn}`]: {\n        width: 150,\n        fontWeight: 500,\n    },\n\n    [`& .${classes.keyInfoTable}`]: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    }\n}));\n\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,mode,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n    const [isOrgWideAppUpdateEnabled, setIsOrgWideAppUpdateEnabled] = useState(false);\n    const settingsContext = useContext(ContextSettings);\n\n    /**\n     * Updates isOrgWideAppUpdateEnabled whenever settingsContext changes\n     */\n    useEffect(() => {\n        const orgWideAppUpdateEnabled = settingsContext.settings.orgWideAppUpdateEnabled;\n        setIsOrgWideAppUpdateEnabled(orgWideAppUpdateEnabled);\n    }, [settingsContext]);\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                if (currentTarget.type === 'checkbox') {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.checked + '';\n                } else {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                }\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <Root>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(tokenEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(revokeEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <IconButton\n                                            aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}\n                                            size=\"large\"\n                                            onClick={() => {navigator.clipboard.writeText(userInfoEndpoint).then(onCopy())}}\n                                        >\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {mode !== 'MAPPED' && (<><TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn} id='grant-types'>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                                                        color='grey'\n                                                        data-testid={key}\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        size='small'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={(!isOrgWideAppUpdateEnabled && !isUserOwner)\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                        </>)}\n                    </TableBody>\n                </Table>\n            </Box>\n        </Root>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    mode: null,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\n\nexport default (KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControl from '@mui/material/FormControl';\nimport Icon from '@mui/material/Icon';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Tooltip from '@mui/material/Tooltip';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\nimport Settings from 'AppComponents/Shared/SettingsContext';\n\nconst PREFIX = 'ViewKeys';\n\nconst classes = {\n    button: `${PREFIX}-button`,\n    inputWrapper: `${PREFIX}-inputWrapper`,\n    copyWrapper: `${PREFIX}-copyWrapper`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    margin: `${PREFIX}-margin`,\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n    iconButton: `${PREFIX}-iconButton`\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    [`& .${classes.inputWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`&.${classes.copyWrapper}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.dialogWrapper}`]: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    }\n}));\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n            isOrgWideAppUpdateEnabled: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        this.getGeneratedKeys();\n        this.isOrgWideAppUpdateEnabled();\n    }\n\n    /**\n     * retrieve Settings from the context and check the org-wide application update enabled\n     */\n    isOrgWideAppUpdateEnabled = () => {\n        const settingsContext = this.context;\n        const orgWideAppUpdateEnabled = settingsContext.settings.orgWideAppUpdateEnabled;\n        this.setState({ isOrgWideAppUpdateEnabled: orgWideAppUpdateEnabled });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    getGeneratedKeys = () => {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const {\n            selectedTab, keyType, intl, loadApplication,\n        } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (error.response.body.code === 900905) {\n                    Alert.error(error.response.body.description);\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                } \n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body && response.body.code !== 900905) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner, isOrgWideAppUpdateEnabled) => {\n        const {\n            intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <Root className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            size='small'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                                size='large'\n                                                onClick={() => {\n                                                    navigator.clipboard.writeText(consumerKey)\n                                                        .then(() => this.onCopy('keyCopied'));\n                                                }}\n                                            >\n                                                <Icon color='secondary'>\n                                                    file_copy\n                                                </Icon>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Root>\n                    <FormControl variant='standard'>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <Root className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                size='small'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                                size='large'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{ root: classes.iconButton }}\n                                                    size='large'\n                                                    onClick={() => {\n                                                        navigator.clipboard\n                                                            .writeText(consumerSecret).then(() => this.onCopy('secretCopied'));\n                                                    }}\n                                                >\n                                                    <Icon color='secondary'>file_copy</Icon>\n                                                </IconButton>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                sx={{ mt: 1 }}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isOrgWideAppUpdateEnabled && !isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </Root>\n                    {!hashEnabled && (\n                        <FormControl variant='standard'>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating, isOrgWideAppUpdateEnabled,\n        } = this.state;\n        const {\n            intl, keyType, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes, mode,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead;\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner, isOrgWideAppUpdateEnabled)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n        return consumerKey && (\n            <Root className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner, isOrgWideAppUpdateEnabled)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button\n                                    onClick={this.handleClose}\n                                    id='generate-access-token-close-btn'\n                                    color='primary'\n                                    autoFocus\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {(keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials')))\n                                    && mode !== 'MAPPED'\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='grey'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='grey'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </Root>\n        );\n    }\n}\n\nViewKeys.contextType = Settings;\n\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n    mode: null,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\nexport default injectIntl(withRouter(ViewKeys));\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { injectIntl } from 'react-intl';\n\nconst PREFIX = 'WaitingForApproval';\n\nconst classes = {\n    root: `${PREFIX}-root`\n};\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.root}`]: {\n        padding: theme.spacing(3),\n    }\n}));\n\nconst waitingForApproval = (props) => {\n    const {\n        keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <Root className={classes.root}>{message}</Root>;\n};\n\nexport default injectIntl((waitingForApproval));\n","\nimport React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={{\n                background: '#ffffff55',\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n                border: 'solid 1px #fff',\n                padding: theme.spacing(2),\n                width: '100%',\n            }}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={{\n                background: '#ffffff55',\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n                border: 'solid 1px #fff',\n                padding: theme.spacing(2),\n                width: '100%',\n            }}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nfunction RemoveKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleRemove = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.content'\n                            defaultMessage='This will remove the key entries stored in devportal,\n                            gateway as well as in the service provider.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleRemove} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default RemoveKeys;\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nfunction CleanKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleClean = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.clean.keys.dialog.content'\n                            defaultMessage='This will remove only the key entries stored in devportal,\n                            gateway and will not remove the service proveder keys.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleClean} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default CleanKeys;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport AppBar from '@mui/material/AppBar';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport API from 'AppData/api';\nimport Table from '@mui/material/Table';\nimport TokenExchangeKeyConfiguration from 'AppComponents/Shared/AppsAndKeys/TokenExchangeKeyConfiguration';\nimport TableRow from '@mui/material/TableRow';\nimport {\n    Dialog,\n    DialogActions, DialogContent,\n    DialogContentText,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TableCell,\n} from '@mui/material';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Grid from '@mui/material/Grid';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\nimport RemoveKeys from './RemoveKeys';\nimport CleanKeys from './CleanKeys';\nimport Settings from 'AppComponents/Shared/SettingsContext';\n\nconst PREFIX = 'TokenManager';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    button: `${PREFIX}-button`,\n    cleanUpButton: `${PREFIX}-cleanUpButton`,\n    cleanUpInfoText: `${PREFIX}-cleanUpInfoText`,\n    tokenSection: `${PREFIX}-tokenSection`,\n    margin: `${PREFIX}-margin`,\n    keyConfigWrapper: `${PREFIX}-keyConfigWrapper`,\n    generateWrapper: `${PREFIX}-generateWrapper`,\n    paper: `${PREFIX}-paper`,\n    muiFormGroupRoot: `${PREFIX}-muiFormGroupRoot`,\n    formControl: `${PREFIX}-formControl`,\n    subTitle: `${PREFIX}-subTitle`,\n    tabPanel: `${PREFIX}-tabPanel`,\n    warningIcon: `${PREFIX}-warningIcon`,\n    leftCol: `${PREFIX}-leftCol`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n\n    [`& .${classes.button}`]: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.cleanUpButton}`]: {\n        marginLeft: 15,\n    },\n\n    [`& .${classes.cleanUpInfoText}`]: {\n        padding: '10px 0px 10px 15px',\n    },\n\n    [`& .${classes.tokenSection}`]: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n\n    [`& .${classes.margin}`]: {\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${classes.keyConfigWrapper}`]: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n\n    [`& .${classes.generateWrapper}`]: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n\n    [`& .${classes.paper}`]: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n\n    [`& .${classes.muiFormGroupRoot}`]: {\n        flexDirection: 'row',\n    },\n\n    [`& .${classes.formControl}`]: {\n    },\n\n    [`& .${classes.subTitle}`]: {\n        fontWeight: 400,\n    },\n\n    [`& .${classes.tabPanel}`]: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n\n    [`& .${classes.warningIcon}`]: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 180,\n    },\n}));\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n            tokenType: 'DIRECT',\n            isOrgWideAppUpdateEnabled: false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n        this.isOrgWideAppUpdateEnabled();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    /**\n     * retrieve Settings from the context and check the org-wide application update enabled\n     */\n    isOrgWideAppUpdateEnabled = () => {\n        const settingsContext = this.context;\n        const orgWideAppUpdateEnabled = settingsContext.settings.orgWideAppUpdateEnabled;\n        this.setState({ isOrgWideAppUpdateEnabled: orgWideAppUpdateEnabled });\n    }\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const {\n            selectedTab, keyType, intl,\n        } = this.props;\n        this.application\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    this.loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    isTokenExchangeEnabled() {\n        const { keyManagers } = this.state;\n        let isEnabled = false;\n        if (keyManagers && keyManagers.length > 1) {\n            keyManagers.map((keymanager) => {\n                if (keymanager.tokenType === 'EXCHANGED' || keymanager.tokenType === 'BOTH') {\n                    isEnabled = true;\n                }\n            });\n        }\n        return isEnabled;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n        const selectedGrantsByDefault = [];\n        if (availableGrantTypes.find((gt) => gt === 'password')) {\n            selectedGrantsByDefault.push('password');\n        }\n        if (availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n            selectedGrantsByDefault.push('client_credentials');\n        }\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const {\n                callbackUrl, supportedGrantTypes, additionalProperties, mode,\n            } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                    || selectedGrantsByDefault,\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({\n                keyRequest: newRequest,\n                selectedTab: newSelectedTab,\n                mode,\n                importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n            });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: selectedGrantsByDefault,\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n                mode: null,\n                importDisabled: false,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType, intl } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const {\n                            callbackUrl, supportedGrantTypes, additionalProperties, mode,\n                        } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys,\n                            keyRequest: newRequest,\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectedGrantTypes = [];\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'password')) {\n                            selectedGrantTypes.push('password');\n                        }\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n                            selectedGrantTypes.push('client_credentials');\n                        }\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes,\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    } else {\n                        Alert.error(error.description\n                            || intl.formatMessage({\n                                id: 'Shared.AppsAndKeys.TokenManager.get.keys.request.error',\n                                defaultMessage: 'Error while retrieving the keys',\n                            }));\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({\n                    keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes,\n                });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(error.description\n                    || `${intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                        defaultMessage: 'Error occurred when generating application keys',\n                    })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body && response.body.message && response.body.description) {\n                    Alert.error(`${response.body.message}: ${response.body.description}`);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status, response } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                if (response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(error.description || intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                        defaultMessage: 'Error occurred when providing application keys',\n                    }));\n                }\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    handleChange = (e) => {\n        this.setState({ tokenType: e.target.defaultValue });\n    }\n\n    handleClose=() => {\n        this.setState({ tokenType: 'DIRECT' });\n    }\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            selectedApp, keyType, summary, selectedApp: { hashEnabled }, isKeyManagerAllowed,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode, tokenType, isOrgWideAppUpdateEnabled,\n        } = this.state;\n\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <Root>\n                    <div className={classes.root}>\n                        <Box mb={1}>\n                            <Typography variant='h5' className={classes.keyTitle}>\n                                {this.toTitleCase(keyType)}\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeyhandleCloses.TokenManager.oauth2.keys.main.title'\n                                    defaultMessage=' OAuth2 Keys'\n                                />\n                            </Typography>\n                        </Box>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography variant='h5' component='h3'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.TokenManager.no.km'\n                                    defaultMessage='No Key Managers'\n                                />\n                            </Typography>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                    defaultMessage='No Key Managers active to generate keys.'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </div>\n                </Root>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Root><Loading /></Root>;\n        }\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab)\n            && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <Root>\n                        <TokenMangerSummary\n                            keys={keys}\n                            key={key}\n                            keyStates={this.keyStates}\n                            selectedApp={selectedApp}\n                            selectedTab={selectedTab}\n                            keyType={keyType}\n                            isKeyJWT={isKeyJWT}\n                            isUserOwner={isUserOwner}\n                        />\n                    </Root>\n                );\n            } else {\n                return (<Root><Progress /></Root>);\n            }\n        }\n\n        let isResidentKeyManagerTokensAvailable = false;\n        if (keys.has('Resident Key Manager')\n            && keys.get('Resident Key Manager').supportedGrantTypes\n            && keys.get('Resident Key Manager').supportedGrantTypes\n                .includes('urn:ietf:params:oauth:grant-type:token-exchange')) {\n            isResidentKeyManagerTokensAvailable = true;\n        }\n\n        let defaultTokenEndpoint;\n\n        if (keyManagers.length > 0) {\n            const residentKMs = keyManagers.filter((item) => item.name === 'Resident Key Manager');\n            defaultTokenEndpoint = residentKMs.length > 0 ? (residentKMs)[0].tokenEndpoint : null;\n        }\n\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <Root>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </Root>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <Root><WaitingForApproval keyState={key.keyState} states={this.keyStates} /></Root>;\n        }\n        return (\n            <Root>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position='static' color='default'>\n                        <Tabs\n                            value={selectedTab}\n                            onChange={this.handleTabChange}\n                            indicatorColor='primary'\n                            textColor='primary'\n                            variant='scrollable'\n                            scrollButtons='auto'\n                            aria-label='scrollable auto tabs example'\n                        >\n                            {keyManagers.map((keymanager) => (\n                                <Tab\n                                    label={keymanager.displayName || keymanager.name}\n                                    value={keymanager.name}\n                                    disabled={!keymanager.enabled || (isKeyManagerAllowed\n                                    && !isKeyManagerAllowed(keymanager.name)\n                                    && ((keymanager.name !== 'Resident Key Manager')\n                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                    id={keymanager.name.replace(/\\s/g, '')}\n                                />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <div>\n                            {keymanager.tokenType === 'DIRECT' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box display='flex' flexDirection='row'>\n                                        <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                            <FormattedMessage\n                                                defaultMessage='Key and Secret'\n                                                id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                            />\n                                        </Typography>\n                                        {keymanager.enableMapOAuthConsumerApps && (\n                                            <Box ml={2}>\n                                                <ImportExternalApp\n                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                    consumerKey={providedConsumerKey}\n                                                    consumerSecret={providedConsumerSecret}\n                                                    isUserOwner={isUserOwner}\n                                                    key={key}\n                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                    importDisabled={importDisabled}\n                                                />\n                                            </Box>\n                                        )}\n                                        {(keymanager.enableTokenGeneration && keys.get(selectedTab))\n                                            && (\n                                                mode !== 'MAPPED'\n                                                    ? (\n                                                        <Box ml={2}>\n                                                            <RemoveKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ) : (\n                                                        <Box ml={2}>\n                                                            <CleanKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ))}\n                                    </Box>\n                                    <Box m={2}>\n                                        <ViewKeys\n                                            initialToken={initialToken}\n                                            initialValidityTime={initialValidityTime}\n                                            initialScopes={initialScopes}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            keys={keys}\n                                            selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                            isUserOwner={isUserOwner}\n                                            hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                            keyManagerConfig={keymanager}\n                                            mode={mode}\n                                            loadApplication={this.loadApplication}\n                                        />\n                                    </Box>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        {\n                                            key\n                                                ? (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configurations'\n                                                        id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configuration'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                    />\n                                                )\n                                        }\n                                    </Typography>\n                                    <Box m={2}>\n                                        <KeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                            mode={mode}\n                                        />\n                                        <div className={classes.generateWrapper}>\n                                            <ScopeValidation\n                                                resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                resourceMethod={resourceMethods.POST}\n                                            >\n                                                {!isOrgWideAppUpdateEnabled && !isUserOwner ? (\n                                                    <>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={\n                                                                key ? this.updateKeys : this.generateKeys\n                                                            }\n                                                            disabled={(!isOrgWideAppUpdateEnabled && !isUserOwner) || isLoading || !keymanager.enableOAuthAppCreation\n                                                                || (isKeyManagerAllowed\n                                                                    && !isKeyManagerAllowed(keymanager.name)\n                                                                    && ((keymanager.name !== 'Resident Key Manager')\n                                                                    || (!this.isTokenExchangeEnabled()\n                                                                    && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                                    defaultMessage: 'Update Keys',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        <Typography variant='caption'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Only owner can generate or update keys'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                            />\n                                                        </Typography>\n                                                    </>\n                                                ) : (\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={key ? this.updateKeys : this.generateKeys}\n                                                            disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation)\n                                                                || (mode && mode === 'MAPPED')\n                                                            || (isKeyManagerAllowed\n                                                                && !isKeyManagerAllowed(keymanager.name)\n                                                                && ((keymanager.name !== 'Resident Key Manager')\n                                                                || (!this.isTokenExchangeEnabled()\n                                                                && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                                    defaultMessage: 'Update',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        {!keymanager.enableOAuthAppCreation && (\n                                                            <Box m={2} display='flex'>\n                                                                <WarningIcon className={classes.warningIcon} />\n                                                                <Typography variant='body1'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Oauth app creation\n                                                                         disabled for {kmName} key manager'\n                                                                        id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                        values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                                    />\n                                                                </Typography>\n                                                            </Box>\n                                                        )}\n                                                    </Box>\n                                                )}\n                                            </ScopeValidation>\n                                        </div>\n\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'EXCHANGED' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        <FormattedMessage\n                                            defaultMessage='Token Generation'\n                                            id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                        />\n                                    </Typography>\n                                    <Box m={2}>\n                                        {/*\n                                        Token exchange grant flow enable/disable logic\n                                        Given that in the key manager selected has the tokenType='EXCHANGE'\n                                            If 'Resident Key Manager' disabled we can't proceed with token exchange.\n                                             So need to show a banner\n                                            If 'Resident Key Manager' enabled,\n                                             we need to check if the resident key manager 'exchange grant' is selected.\n                                            So we need to ask the user to select 'exchange grant' for the 'Resident Key Manager'.\n                                            If 'Resident Key Manager' enabled and 'exchange grant' is enabled the token exchange is possible\n                                        */}\n                                        <TokenExchangeKeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                        />\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'BOTH' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box m={2}>\n                                        <Box m={2}>\n                                            <Box display='flex' alignItems='center'>\n                                                <Table className={classes.table}>\n                                                    <TableRow>\n                                                        <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                            <FormattedMessage\n                                                                defaultMessage='API Invocation Method'\n                                                                id='Shared.AppsAndKeys.KeyConfiguration.API Invocation.Method.label'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <RadioGroup\n                                                                style={{ flexDirection: 'row' }}\n                                                                aria-label='tokenType'\n                                                                name='tokenType'\n                                                                value={tokenType}\n                                                                onChange={this.handleChange}\n                                                            >\n                                                                <FormControlLabel\n                                                                    value='DIRECT'\n                                                                    control={<Radio />}\n                                                                    label='Direct Token'\n                                                                    id='direct-token'\n                                                                />\n                                                                <FormControlLabel\n                                                                    value='EXCHANGED'\n                                                                    control={<Radio />}\n                                                                    label='Exchange Token'\n                                                                    id='exchange-token'\n                                                                />\n                                                            </RadioGroup>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                </Table>\n                                            </Box>\n                                        </Box>\n\n                                        {tokenType === 'DIRECT' && (\n                                            <>\n                                                <Box display='flex' flexDirection='row'>\n                                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                        <FormattedMessage\n                                                            defaultMessage='Key and Secret'\n                                                            id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                                        />\n                                                    </Typography>\n                                                    {\n                                                        keymanager.enableMapOAuthConsumerApps && (\n                                                            <Box ml={2}>\n                                                                <ImportExternalApp\n                                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                                    consumerKey={providedConsumerKey}\n                                                                    consumerSecret={providedConsumerSecret}\n                                                                    isUserOwner={isUserOwner}\n                                                                    key={key}\n                                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                                    importDisabled={importDisabled}\n                                                                />\n                                                            </Box>\n                                                        )\n                                                    }\n                                                </Box>\n                                                <Box m={2}>\n                                                    <ViewKeys\n                                                        initialToken={initialToken}\n                                                        initialValidityTime={initialValidityTime}\n                                                        initialScopes={initialScopes}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        keys={keys}\n                                                        selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                                        isUserOwner={isUserOwner}\n                                                        hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                                        keyManagerConfig={keymanager}\n                                                        mode={mode}\n                                                        loadApplication={this.loadApplication}\n                                                    />\n                                                </Box>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    {\n                                                        key\n                                                            ? (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configurations'\n                                                                    id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                                />\n                                                            )\n                                                            : (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configuration'\n                                                                    id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                                />\n                                                            )\n                                                    }\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <KeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                    <div className={classes.generateWrapper}>\n                                                        <ScopeValidation\n                                                            resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                            resourceMethod={resourceMethods.POST}\n                                                        >\n                                                            {!isOrgWideAppUpdateEnabled && !isUserOwner ? (\n                                                                <>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={\n                                                                            key ? this.updateKeys : this.generateKeys\n                                                                        }\n\n                                                                    >\n                                                                        {key ? 'Update keys' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    <Typography variant='caption'>\n                                                                        <FormattedMessage\n                                                                            defaultMessage='Only owner can generate or update keys'\n                                                                            id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                                        />\n                                                                    </Typography>\n                                                                </>\n                                                            ) : (\n                                                                <Box display='flex'>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={key ? this.updateKeys : this.generateKeys}\n\n                                                                    >\n                                                                        {key ? 'Update' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    {!keymanager.enableOAuthAppCreation && (\n                                                                        <Box m={2} display='flex'>\n                                                                            <WarningIcon className={classes.warningIcon} />\n                                                                            <Typography variant='body1'>\n                                                                                <FormattedMessage\n                                                                                    defaultMessage='Oauth app creation disabled for\n                                                                                     {kmName} key manager'\n                                                                                    id='Shared.AppsAndKeys.TokenManager.app.creation.disable\n                                                                                    .warn'\n                                                                                    values={{\n                                                                                        kmName: keymanager.displayName || keymanager.name,\n                                                                                    }}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Box>\n                                                                    )}\n                                                                </Box>\n                                                            )}\n                                                        </ScopeValidation>\n                                                    </div>\n                                                </Box>\n                                            </>\n                                        )}\n                                        {(tokenType === 'EXCHANGED' && isResidentKeyManagerTokensAvailable) && (\n                                            <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Token Generation'\n                                                        id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                                    />\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <TokenExchangeKeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </Box>\n                                            </TabPanel>\n                                        )}\n                                    </Box>\n                                </TabPanel>\n                            )}\n                        </div>\n                    ))}\n\n                </div>\n                {(tokenType === 'EXCHANGED' && !isResidentKeyManagerTokensAvailable) && (\n                    <div className={classes.inputWrapper}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Dialog\n                                    fullScreen={false}\n                                    open\n                                    onClose={this.handleClose}\n                                    aria-labelledby='responsive-dialog-title'\n                                    className={classes.dialogWrapper}\n                                >\n                                    <DialogTitle id='responsive-dialog-title'>\n                                        {'Resident Key Manager Consumer Key and Secret Not Available '}\n                                    </DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText>\n                                            <>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewCurl.error'\n                                                        defaultMessage='Please generate the Consumer Key and Secret for\n                                                         Residence Key Manager with selecting the\n                                                          urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                           order to use the token Exchange Approach. '\n                                                    />\n                                                </Typography>\n                                            </>\n                                        </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n\n                                        <Button onClick={this.handleClose} color='primary' autoFocus id='close-btn'>\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                defaultMessage='Close'\n                                            />\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </Root>\n        );\n    }\n}\n\nTokenManager.contextType = Settings;\n\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl((TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n"],"names":["ImportExternalApp","props","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","React","handleClose","isOrgWideAppUpdateEnabled","setIsOrgWideAppUpdateEnabled","useState","settingsContext","useContext","Settings","handleChange","event","useEffect","orgWideAppUpdateEnabled","settings","Button","variant","color","startIcon","PlayForWorkIcon","onClick","handleClickOpen","disabled","FormattedMessage","defaultMessage","id","Dialog","onClose","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","label","formatMessage","value","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","ScopeValidation","resourcePath","resourcePaths","APPLICATION_GENERATE_KEYS","resourceMethod","resourceMethods","POST","Typography","propTypes","PropTypes","isRequired","defaultProps","PREFIX","classes","code","command","encodeVisible","contentWrapper","Root","styled","_ref","theme","padding","marginBottom","background","palette","grey","flex","cursor","textDecoration","display","ViewCurl","keys","keyManagerConfig","jwtToken","defaultTokenEndpoint","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","onCopy","setTimeout","applyReal","tokenEndpoint","alias","className","Tooltip","title","placement","IconButton","size","navigator","clipboard","writeText","then","FileCopy","apis","injectIntl","FormControlOdd","button","quotaHelp","checkboxWrapper","generateWrapper","checkboxWrapperColumn","group","removeHelperPadding","iconStyle","iconButton","titleColumn","keyInfoTable","leftCol","stepLabel","stepContent","keyLabel","idpGrid","helperTextError","input","avatar","copyIconStyle","hr","divCenter","tableHeader","helperText","dialogWrapper","tokenSection","inputWrapper","bottomInfo","paddingTop","paddingBottom","paddingLeft","width","marginLeft","position","flexWrap","flexDirection","whiteSpace","fontSize","fontWeight","borderCollapse","borderBottom","alignSelf","textAlign","alignItems","height","border","lineHeight","maxWidth","getContrastText","paper","marginRight","marginTop","reducer","state","newValue","field","_objectSpread","TokenExchangeKeyConfiguration","urlCopied","setUrlCopied","showCS","setShowCS","showToken","setShowToken","showCurl","setShowCurl","showSecretGen","setShowSecretGen","notFound","setNotFound","isUpdating","setIsUpdating","isResidenceTokenAvailable","setIsResidenceTokenAvailable","initialState","tokenResponse","token","tokenScope","tokenValidityTime","accessTokenRequest","timeout","scopesSelected","keyType","subscriptionScopes","externalIDPToken","externalIDPTokenError","isKeyJWT","initialExecution","dispatch","useReducer","selectedApp","selectedTab","hashEnabled","fullScreen","appId","applicationPromise","Application","get","dialogHead","application","getKeys","newRequest","map","scope","catch","error","status","validateExternalIDPToken","values","selectedIdPType","type","ResourceNotFound","Loading","csCkKeys","Box","Table","table","TableBody","TableRow","TableCell","component","selectedIdpType","allowedAudience","root","Icon","target","rows","FormHelperTextProps","textField","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","isTokenExchange","CircularProgress","generateAccessToken","generateToken","response","console","log","accessToken","tokenScopes","validityTime","Alert","description","body","message","autoFocus","handleClickOpenCurl","validating","summary","Object","keyRequest","callbackUrl","selectedGrantTypes","isKeysAvailable","setGenerateEnabled","updateKeyRequest","tokenType","owner","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","currentTarget","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","pkceMandatory","pkceSupportPlain","bypassClientCredentials","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","multiple","select","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","ChipInput","onAdd","tag","chipRenderer","_ref2","onDelete","filter","oldScope","style","float","contextType","KeyConfiguration","callbackHelper","setCallbackHelper","updateHasError","callbackError","mode","applicationConfiguration","availableGrantTypes","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","userInfoEndpoint","ContextSettings","cloneDeep","newGrantTypes","keyManager","includes","clonedAdditionalProperties","getPreviousValue","isPreviousValueSet","defaultValue","default","grantTypeDisplayListMap","getGrantTypeDisplayList","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","FormControlLabel","control","placeholder","length","copyWrapper","ViewKeys","constructor","super","_defineProperty","this","context","setState","that","elementName","caller","data","preventDefault","keyMappingId","loadApplication","removeKeys","result","info","regenerateSecret","secretGenResponse","keyCopied","secretCopied","InputProps","readOnly","endAdornment","InputAdornment","sx","mt","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","componentDidMount","getGeneratedKeys","componentDidUpdate","prevProps","render","initialToken","initialValidityTime","initialScopes","accessTokenScopes","validityPeriod","tokenDetails","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","ViewSecret","secret","find","a","withRouter","keyState","states","REJECTED","TokenManagerSummary","keyStates","CREATED","WaitingForApproval","keyGrantTypes","handleClickRemove","DeleteIcon","handleRemove","handleClean","cleanUpButton","cleanUpInfoText","keyConfigWrapper","muiFormGroupRoot","subTitle","tabPanel","warningIcon","backgroundColor","main","TabPanel","children","index","other","_objectWithoutProperties","_excluded","_extends","role","hidden","p","TokenManager","newSelectedTab","keyManagers","selectedKM","x","selectedGrantsByDefault","gt","push","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","selectdKM","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","nextProps","nextKeyType","prevKeyType","confItem","isTokenExchangeEnabled","isEnabled","keymanager","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","isKeyManagerAllowed","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","AuthManager","getUser","TokenMangerSummary","Progress","isResidentKeyManagerTokensAvailable","has","residentKMs","AppBar","Tabs","handleTabChange","indicatorColor","textColor","scrollButtons","Tab","displayName","ml","RemoveKeys","CleanKeys","m","enableTokenHashing","setValidating","WarningIcon","kmName","RadioGroup","Radio","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","PUT","GET","DELETE","hasScope","hasScopes","haveScope","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","getSubscriptions","apiId","applicationId","limit","arguments","undefined","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr"],"sourceRoot":""}