{"version":3,"file":"7100.1784c2f54a40d327ca21.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Settings/ChangePassword/ChangePasswordBase.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Settings/ChangePassword/ChangePassword.jsx"],"sourcesContent":["/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport PropTypes from 'prop-types';\n\nconst PREFIX = 'ChangePasswordBase';\n\nconst classes = {\n    createTitle: `${PREFIX}-createTitle`,\n    formContent: `${PREFIX}-formContent`\n};\n\nconst StyledBox = styled(Box)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.createTitle}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n\n    [`& .${classes.formContent}`]: {\n        '& span, & div, & p, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        }\n    }\n}));\n\n/**\n * Base component for Password change form\n *\n * @param {Object} props title and children components are expected\n * @returns {React.Component} Base element\n */\nfunction ChangePasswordBase(props) {\n    const { title, children } = props;\n\n    return (\n        <StyledBox width={1} mt={5}>\n            <Grid justifyContent='center' container spacing={3}>\n                <Grid item sm={6} md={4}>\n                    <Grid container spacing={4}>\n                        <Grid item md={12} className={classes.createTitle}>\n                            {title}\n                        </Grid>\n                        <Grid item md={12} className={classes.formContent}>\n                            <Paper elevation={0}>{children}</Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </StyledBox>\n    );\n}\nChangePasswordBase.propTypes = {\n    title: PropTypes.element.isRequired,\n    children: PropTypes.element.isRequired,\n};\nexport default ChangePasswordBase;\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FormattedMessage } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Settings from 'Settings';\nimport Joi from '@hapi/joi';\nimport { Box, Grid } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport ChangePasswordBase from './ChangePasswordBase';\nimport PageNotFound from 'AppComponents/Base/Errors/PageNotFound'\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { useSettingsContext } from 'AppComponents/Shared/SettingsContext';\n\nconst PREFIX = 'ChangePassword';\n\nconst classes = {\n    mandatoryStarText: `${PREFIX}-mandatoryStarText`,\n    passwordChangeForm: `${PREFIX}-passwordChangeForm`\n};\n\nconst StyledChangePasswordBase = styled(ChangePasswordBase)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStarText}`]: {\n        '& label>span:nth-child(1)': {\n            color: 'red',\n        },\n    },\n\n    [`& .${classes.passwordChangeForm}`]: {\n        '& > span, & div, & p, & input': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    }\n}));\n\n/**\n * Reducer\n * @param {JSON} state State\n * @returns {Promise}.\n */\nfunction reducer(state, { field, value }) {\n    return {\n        ...state,\n        [field]: value,\n    };\n}\n\nconst ChangePassword = () => {\n    const {\n        settings: {\n            IsPasswordChangeEnabled,\n            userStorePasswordPattern,\n            passwordPolicyPattern,\n            passwordPolicyMinLength,\n            passwordPolicyMaxLength,\n        }\n    } = useSettingsContext();\n\n    const username = AuthManager.getUser().name;\n    const initialState = {\n        currentPassword: undefined,\n        newPassword: undefined,\n        repeatedNewPassword: undefined,\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentPassword, newPassword, repeatedNewPassword } = state;\n    const passwordChangeGuideEnabled = false || Settings.passwordChange.guidelinesEnabled;\n    let passwordChangeGuide = [];\n    if (passwordChangeGuideEnabled) {\n        passwordChangeGuide = Settings.passwordChange.policyList;\n    }\n\n    const validateCurrentPasswordChange = () => {\n        if (currentPassword === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const validatePasswordChange = () => {\n        // Validate against min, max legths if available.\n        // also check whether empty.\n        let legthCheckSchema = Joi.string().empty();\n        if (passwordPolicyMinLength && passwordPolicyMinLength !== -1) {\n            legthCheckSchema = legthCheckSchema.min(passwordPolicyMinLength);\n        }\n        if (passwordPolicyMaxLength && passwordPolicyMaxLength !== -1) {\n            legthCheckSchema = legthCheckSchema.max(passwordPolicyMaxLength);\n        }\n        const LengthValidationError = legthCheckSchema.validate(newPassword).error;\n        if (LengthValidationError) {\n            const errorType = LengthValidationError.details[0].type;\n            if (errorType === 'string.empty') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.empty'\n                        defaultMessage='Password is empty'\n                    />\n                );\n            } else if (errorType === 'string.min') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.length.short'\n                        defaultMessage='Password is too short!'\n                    />\n                );\n            } else if (errorType === 'string.max') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.length.long'\n                        defaultMessage='Password is too long!'\n                    />\n                );\n            }\n        }\n\n        // Validate against user store password pattern regex, if available.\n        if (userStorePasswordPattern) {\n            const userStoreSchema = Joi.string().pattern(new RegExp(userStorePasswordPattern));\n            const userStoreValidationError = userStoreSchema.validate(newPassword).error;\n            if (userStoreValidationError) {\n                const errorType = userStoreValidationError.details[0].type;\n                if (errorType === 'string.pattern.base') {\n                    return (\n                        <FormattedMessage\n                            id='Change.Password.password.pattern.invalid'\n                            defaultMessage='Invalid password pattern'\n                        />\n                    );\n                }\n            }\n        }\n\n        // Validate against password policy pattern regex, if available.\n        if (passwordPolicyPattern) {\n            const passwordPolicySchema = Joi.string().pattern(new RegExp(passwordPolicyPattern));\n            const passwordPolicyValidationError = passwordPolicySchema.validate(newPassword).error;\n            if (passwordPolicyValidationError) {\n                const errorType = passwordPolicyValidationError.details[0].type;\n                if (errorType === 'string.pattern.base') {\n                    return (\n                        <FormattedMessage\n                            id='Change.Password.password.pattern.invalid'\n                            defaultMessage='Invalid password pattern'\n                        />\n                    );\n                }\n            }\n        }\n\n        return false;\n    };\n\n    const validateRepeatedPassword = () => {\n        if (repeatedNewPassword && newPassword !== repeatedNewPassword) {\n            return (\n                <FormattedMessage\n                    id='Change.Password.password.mismatch'\n                    defaultMessage={'Password doesn\\'t match'}\n                />\n            );\n        }\n    };\n\n    const handleChange = ({ target: { name: field, value } }) => {\n        dispatch({ field, value });\n    };\n\n    const handleSave = () => {\n        if (repeatedNewPassword && newPassword !== repeatedNewPassword) {\n            Alert.error(\n                <FormattedMessage\n                    id='Change.Password.password.mismatch'\n                    defaultMessage={'Password doesn\\'t match'}\n                />\n            );\n        } else {\n            const restApi = new API();\n            return restApi\n                .changePassword(currentPassword, newPassword)\n                .then((res) => {\n                    Alert.success(\n                        <FormattedMessage\n                            id='Change.Password.password.changed.success'\n                            defaultMessage='User password changed successfully. Please use the new password on next sign in'\n                        />\n                    );\n                    window.history.back();\n                })\n                .catch((error) => {\n                    const errorCode = error.response.body.code;\n                    switch (errorCode) {\n                        case 901450:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.password.change.disabled'\n                                    defaultMessage='Password change disabled'\n                                />\n                            );\n                            break;\n                        case 901451:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.current.password.incorrect'\n                                    defaultMessage='Current password is incorrect'\n                                />\n                            );\n                            break;\n                        case 901452:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.password.pattern.invalid'\n                                    defaultMessage='Invalid password pattern'\n                                />\n                            );\n                            break;\n                    }\n                });\n        }\n    };\n\n    const title = (\n        <>\n            <Typography variant='h5' component='h1'>\n                <FormattedMessage\n                    id='Change.Password.title'\n                    defaultMessage='Change Password'\n                />\n                {': '\n                    + username}\n            </Typography>\n            <Typography variant='caption'>\n                <FormattedMessage\n                    id='Change.Password.description'\n                    defaultMessage={'Change your own password.'\n                        + ' Required fields are marked with an asterisk ( * )'}\n                />\n            </Typography>\n            {passwordChangeGuideEnabled && passwordChangeGuide.length > 0\n                ? (\n                    <Typography variant='body2'>\n                        <FormattedMessage\n                            id='Change.Password.password.policy'\n                            defaultMessage='Password policy:'\n                        />\n                        <ul style={{ marginTop: '-4px', marginBottom: '-8px' }}>\n                            {passwordChangeGuide.map((rule) => {\n                                return (\n                                    <li>\n                                        {rule}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </Typography>\n                )\n                : null}\n        </>\n    );\n\n    if (IsPasswordChangeEnabled === undefined) {\n        return <Progress />;\n    }\n\n    // If the user is eligible to change the password, display password change form.\n    // otherwise, display page not found.\n    if (IsPasswordChangeEnabled) {\n        return (\n            <StyledChangePasswordBase title={title}>\n                <Box py={2} display='flex' justifyContent='center'>\n                    <Grid item xs={10} md={9}>\n                        <Box component='div' m={2}>\n                            <Grid\n                                container\n                                mt={2}\n                                spacing={2}\n                                direction='column'\n                                justifyContent='center'\n                                alignItems='flex-start'\n                            >\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    required\n                                    id='current-password'\n                                    autoFocus\n                                    margin='dense'\n                                    name='currentPassword'\n                                    value={currentPassword}\n                                    onChange={handleChange}\n                                    label={<FormattedMessage id='Settings.ChangePasswordForm.current.password' defaultMessage='Current Password' />}\n                                    fullWidth\n                                    error={validateCurrentPasswordChange()}\n                                    helperText={<FormattedMessage id='Settings.ChangePasswordForm.enter.current.password' defaultMessage='Enter Current Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    margin='dense'\n                                    id='new-password'\n                                    name='newPassword'\n                                    value={newPassword}\n                                    onChange={handleChange}\n                                    label={\n                                        <FormattedMessage id='Settings.ChangePasswordForm.new.password' defaultMessage='New Password' />\n                                    }\n                                    required\n                                    fullWidth\n                                    error={validatePasswordChange()}\n                                    helperText={validatePasswordChange()\n                                        || <FormattedMessage id='Settings.ChangePasswordForm.enter.new.password' defaultMessage='Enter a New Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    margin='dense'\n                                    id='repeated-new-password'\n                                    name='repeatedNewPassword'\n                                    value={repeatedNewPassword}\n                                    onChange={handleChange}\n                                    label={\n                                        <FormattedMessage id='Settings.ChangePasswordForm.confirm.new.password' defaultMessage='Confirm new Password' />\n                                    }\n                                    required\n                                    fullWidth\n                                    error={validateRepeatedPassword()}\n                                    helperText={validateRepeatedPassword()\n                                        || <FormattedMessage id='Settings.ChangePasswordForm.confirmationOf.new.password' defaultMessage='Confirmation of new Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n\n                                <Box my={2} display='flex' flexDirection='row'>\n                                    <Box mr={1}>\n                                        <Button\n                                            color='primary'\n                                            variant='contained'\n                                            onClick={handleSave}\n                                            className={classes.passwordChangeForm}\n                                            data-testid='change-password-save-button'\n                                        >\n                                            <FormattedMessage\n                                                id='Settings.ChangePasswordForm.Save.Button.text'\n                                                defaultMessage='Save'\n                                            />\n                                        </Button>\n                                    </Box>\n                                    <Box mx={1}>\n                                        <Button\n                                            onClick={() => window.history.back()}\n                                        >\n                                            <FormattedMessage\n                                                id='Settings.ChangePasswordForm.Cancel.Button.text'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                </Box>\n            </StyledChangePasswordBase>\n        );\n    } else {\n        return <PageNotFound />;\n    }\n\n};\n\nexport default ChangePassword;\n"],"names":["PREFIX","classes","createTitle","formContent","StyledBox","styled","Box","_ref","theme","color","palette","getContrastText","background","default","paper","ChangePasswordBase","props","title","children","React","width","mt","Grid","justifyContent","container","spacing","item","sm","md","className","Paper","elevation","propTypes","PropTypes","isRequired","mandatoryStarText","passwordChangeForm","StyledChangePasswordBase","primary","main","reducer","state","_ref2","field","value","_objectSpread","ChangePassword","settings","IsPasswordChangeEnabled","userStorePasswordPattern","passwordPolicyPattern","passwordPolicyMinLength","passwordPolicyMaxLength","useSettingsContext","username","AuthManager","getUser","name","dispatch","useReducer","currentPassword","undefined","newPassword","repeatedNewPassword","passwordChangeGuideEnabled","Settings","guidelinesEnabled","passwordChangeGuide","policyList","validatePasswordChange","legthCheckSchema","Joi","empty","min","max","LengthValidationError","validate","error","errorType","details","type","FormattedMessage","id","defaultMessage","userStoreValidationError","pattern","RegExp","passwordPolicyValidationError","validateRepeatedPassword","handleChange","_ref3","target","Typography","variant","component","length","style","marginTop","marginBottom","map","rule","Progress","py","display","xs","m","direction","alignItems","TextField","root","required","autoFocus","margin","onChange","label","fullWidth","helperText","my","flexDirection","mr","Button","onClick","handleSave","API","changePassword","then","res","Alert","success","window","history","back","catch","response","body","code","mx","PageNotFound"],"sourceRoot":""}