{"version":3,"file":"2082.9ba0203193d4d5989932.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/WebhookSubscriptionUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/GenericSubscriptionUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiConsole.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useReducer } from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\nimport AccordionActions from '@mui/material/AccordionActions';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@mui/material/Grid';\nimport Radio from '@mui/material/Radio';\nimport { RadioGroup, useTheme } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Badge from '@mui/material/Badge';\n\nfunction reducer(state, { field, value }) {\n    return { ...state, [field]: value };\n}\n\nfunction WebhookSubscriptionUI(props) {\n    const intl = useIntl();\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const theme = useTheme();\n    const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n    const { generateGenericWHSubscriptionCurl, topic } = props;\n    const initialSubscriptionState = {\n        topic: topic.name,\n        secret: null,\n        lease: 50000,\n        mode: 'subscribe',\n        callback: null,\n    };\n    const [curl, setCurl] = useState(generateGenericWHSubscriptionCurl(initialSubscriptionState));\n    const [formError, setFormError] = useState(false);\n    const [state, dispatch] = useReducer(reducer, initialSubscriptionState);\n\n    const handleClick = () => {\n        if (!state.callback || state.callback.length < 1) {\n            setFormError(true);\n        } else {\n            setFormError(false);\n            setCurl(generateGenericWHSubscriptionCurl(state));\n        }\n    };\n\n    const handleChange = (e) => {\n        dispatch({ field: e.target.name, value: e.target.value });\n    };\n\n    return (\n        <Accordion sx={{\n            marginBottom: '10px',\n            border: `1px solid ${backgroundColor}`,\n        }}\n        >\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='wh-subscription-content'\n                id='wh-subscription-header'\n                sx={{\n                    backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                    maxHeight: '40px',\n                    borderColor: '#80bdff',\n                    '&$expanded': {\n                        maxHeight: '40px',\n                    },\n                }}\n            >\n                <Grid container direction='row' justifyContent='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                sx={{\n                                    backgroundColor: '#ffffff',\n                                    borderColor: backgroundColor,\n                                    color: backgroundColor,\n                                    width: theme.spacing(2),\n                                }}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap' spacing={3}>\n                    <Grid item xs={6} marginBottom={2}>\n                        <RadioGroup aria-label='mode' name='mode' value={state.mode} row onChange={handleChange}>\n                            <FormControlLabel\n                                value='subscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Subscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Subscribe',\n                                })}\n                            />\n                            <FormControlLabel\n                                value='unsubscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Unsubscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Unsubscribe',\n                                })}\n                            />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item xs={6} marginBottom={2}>\n                        <TextField\n                            variant='outlined'\n                            size='small'\n                            sx={{ width: '50%' }}\n                            name='callback'\n                            id='standard-full-width'\n                            label={intl.formatMessage({\n                                defaultMessage: 'Callback URL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.callback',\n                            })}\n                            error={formError}\n                            required\n                            placeholder='www.webhook.site'\n                            onChange={handleChange}\n                            fullWidth\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: {\n                                        padding: 0,\n                                        'label + &': {\n                                            marginTop: theme.spacing(1),\n                                        },\n                                    },\n                                    input: {\n                                        borderRadius: 4,\n                                        backgroundColor: theme.palette.common.white,\n                                        border: '1px solid #ced4da',\n                                        padding: '5px 12px',\n                                        marginTop: '11px',\n                                        marginBottom: '11px',\n                                        width: '100%',\n                                        transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                        '&:focus': {\n                                            borderColor: '#80bdff',\n                                            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                        },\n                                        fontSize: 12,\n                                    },\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                    {state.mode === 'subscribe' && (\n                        <>\n                            <Grid item xs={6} marginBottom={2}>\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    sx={{ width: '50%' }}\n                                    name='secret'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Secret',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.secret',\n                                    })}\n                                    placeholder='secret'\n                                    onChange={handleChange}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: {\n                                                padding: 0,\n                                                'label + &': {\n                                                    marginTop: theme.spacing(1),\n                                                },\n                                            },\n                                            input: {\n                                                borderRadius: 4,\n                                                backgroundColor: theme.palette.common.white,\n                                                border: '1px solid #ced4da',\n                                                padding: '5px 12px',\n                                                marginTop: '11px',\n                                                marginBottom: '11px',\n                                                width: '100%',\n                                                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                                '&:focus': {\n                                                    borderColor: '#80bdff',\n                                                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                                },\n                                                fontSize: 12,\n                                            },\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6} marginBottom={2}>\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    sx={{ width: '50%' }}\n                                    name='lease'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Lease Seconds',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.lease',\n                                    })}\n                                    onChange={handleChange}\n                                    defaultValue={50000}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: {\n                                                padding: 0,\n                                                'label + &': {\n                                                    marginTop: theme.spacing(1),\n                                                },\n                                            },\n                                            input: {\n                                                borderRadius: 4,\n                                                backgroundColor: theme.palette.common.white,\n                                                border: '1px solid #ced4da',\n                                                padding: '5px 12px',\n                                                marginTop: '11px',\n                                                marginBottom: '11px',\n                                                width: '100%',\n                                                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                                '&:focus': {\n                                                    borderColor: '#80bdff',\n                                                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                                },\n                                                fontSize: 12,\n                                            },\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12}>\n                        <TextField\n                            variant='filled'\n                            label={intl.formatMessage({\n                                defaultMessage: 'cURL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.curl',\n                            })}\n                            defaultValue=''\n                            value={curl}\n                            fullWidth\n                            multiline\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: {\n                                        padding: 0,\n                                        'label + &': {\n                                            marginTop: theme.spacing(1),\n                                        },\n                                    },\n                                    input: {\n                                        borderRadius: 4,\n                                        backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                                        color: theme.custom.curlGenerator.color,\n                                        border: '1px solid #ced4da',\n                                        padding: '5px 12px',\n                                        marginTop: '11px',\n                                        marginBottom: '11px',\n                                        width: '100%',\n                                        transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                        '&:focus': {\n                                            borderColor: '#80bdff',\n                                            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                        },\n                                        fontSize: 12,\n                                        fontFamily: 'monospace',\n                                        fontWeight: 600,\n                                    },\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={() => {\n                        navigator.clipboard.writeText(curl)\n                            .then(() => Alert.info(intl.formatMessage({\n                                defaultMessage: 'cURL copied',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.curl.copied',\n                            })));\n                    }}\n                >\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                </Button>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n\nexport default WebhookSubscriptionUI;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\nimport AccordionActions from '@mui/material/AccordionActions';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Grid from '@mui/material/Grid';\nimport Badge from '@mui/material/Badge';\nimport { useTheme } from '@mui/material';\n\nexport default function GenericSubscriptionUI(props) {\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const theme = useTheme();\n    const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n    const { generateGenericSubscriptionCommand, topic, expandable } = props;\n    const [command, setCommand] = useState(generateGenericSubscriptionCommand(topic));\n\n    const handleClick = () => {\n        setCommand(generateGenericSubscriptionCommand(topic));\n    };\n\n    return (\n        <Accordion\n            sx={{\n                marginBottom: '10px',\n                border: `1px solid ${backgroundColor}`,\n            }}\n            style={{ pointerEvents: expandable ? 'auto' : 'none' }}\n        >\n            <AccordionSummary\n                expandIcon={expandable && (<ExpandMoreIcon />)}\n                aria-controls='generic-subscription-content'\n                id='generic-subscription-header'\n                sx={{\n                    backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                    maxHeight: '40px',\n                    '&$expanded': {\n                        maxHeight: '40px',\n                    },\n                }}\n            >\n                <Grid container direction='row' justifyContent='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                sx={{\n                                    backgroundColor: '#ffffff',\n                                    borderColor: backgroundColor,\n                                    color: backgroundColor,\n                                    width: theme.spacing(2),\n                                }}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap'>\n                    <TextField\n                        variant='filled'\n                        label='cURL'\n                        defaultValue=''\n                        value={command}\n                        multiline\n                        InputProps={{\n                            disableUnderline: true,\n                            classes: {\n                                root: {\n                                    padding: 0,\n                                    'label + &': {\n                                        marginTop: theme.spacing(1),\n                                    },\n                                },\n                                input: {\n                                    borderRadius: 4,\n                                    backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                                    color: theme.custom.curlGenerator.color,\n                                    border: '1px solid #ced4da',\n                                    padding: '5px 12px',\n                                    marginTop: '11px',\n                                    marginBottom: '11px',\n                                    width: '100%',\n                                    transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                    '&:focus': {\n                                        borderColor: '#80bdff',\n                                        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                    },\n                                    fontSize: 12,\n                                    fontFamily: 'monospace',\n                                    fontWeight: 600,\n                                },\n                            },\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={() => {\n                        navigator.clipboard.writeText(command).then(() => Alert.info(\n                            <FormattedMessage id='Apis.Details.AsyncApiConsole.Copied' defaultMessage='cURL copied' />,\n                        ));\n                    }}\n                >\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                </Button>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport WebhookSubscriptionUI from './WebhookSubscriptionUI';\nimport GenericSubscriptionUI from './GenericSubscriptionUI';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport CONSTANTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useIntl } from 'react-intl';\n\nconst PREFIX = 'AsyncApiUI';\n\nconst classes = {\n    endpointSelectorRoot: `${PREFIX}-endpointSelectorRoot`,\n    selectList: `${PREFIX}-selectList`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')({\n    [`& .${classes.endpointSelectorRoot}`]: {\n        paddingBottom: '20px',\n    },\n    // this styling is used to resemble the switch to swagger-ui switch\n    [`& .${classes.selectList}`]: {\n        minWidth: '130px',\n        maxWidth: '100%',\n        border: '2px solid #41444e',\n        fontFamily: 'sans-serif',\n        fontSize: '14px',\n        fontWeight: 700,\n        padding: '2px 2px 2px 10px',\n        borderRadius: '4px',\n        color: '#3b4151',\n    }\n});\n\nexport default function AsyncApiUI(props) {\n\n    const intl = useIntl();\n    const {\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        accessTokenProvider,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const isAdvertised = api.advertiseInfo && api.advertiseInfo.advertised;\n\n    let initialEndpoint;\n    initialEndpoint = URLs && (URLs.http || URLs.https);\n    if (api.type === CONSTANTS.API_TYPES.WS) {\n        initialEndpoint = URLs && (URLs.ws || URLs.wss);\n    }\n\n    let expandable = true;\n    if (!URLs || (!URLs.http && !URLs.https)) {\n        expandable = false;\n    }\n\n    const [allTopics, setAllTopics] = useState('');\n    const [endPoint, setEndpoint] = useState(initialEndpoint);\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promisedTopics = apiClient.getAllTopics(apiID);\n        promisedTopics.then((response) => {\n            setAllTopics(response.body);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.AsyncApiConsole.AsyncApiUI.topics.get.error',\n                defaultMessage: 'Error while retrieving topics for the API.',\n            }));\n        });\n    }, []);\n\n    const handleServerChange = (event) => {\n        setEndpoint(event.target.value);\n    };\n\n    function generateAccessToken() {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessTokenProvider();\n        } else if (securitySchemeType === 'BASIC') {\n            token = 'Basic ' + accessTokenProvider();\n        } else if (isAdvertised) {\n            token = accessTokenProvider();\n        } else {\n            token = 'Bearer ' + accessTokenProvider();\n        }\n        return token;\n    }\n\n    function generateGenericWHSubscriptionCurl(subscription) {\n        const {\n            topic, callback, secret, mode, lease,\n        } = subscription;\n        const token = generateAccessToken();\n        if (mode === 'subscribe') {\n            let curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}'`;\n            if (secret) {\n                curl += ` -d 'hub.secret=${secret}'`;\n            }\n            if (lease) {\n                curl += ` -d 'hub.lease_seconds=${lease}'`;\n            }\n            if (api.advertiseInfo && api.advertiseInfo.adveritsed && authorizationHeader !== '') {\n                curl += ` -H '${authorizationHeader}: ${token}'`;\n            } else {\n                curl += ` -H 'Authorization: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function getTopicName(topic) {\n        let topicName = topic.name;\n        // Remove the / from the topic name\n        if (topicName.charAt(0) === '/') {\n            topicName = topicName.substring(1);\n        }\n        return topicName;\n    }\n\n    function generateWSSubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let wscat = `wscat -c '${endPoint}' -H '${securitySchemeType === 'API-KEY' ? 'apikey' : 'Authorization'}: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        } else {\n            let wscat = `wscat -c '${endPoint}/${getTopicName(topic)}' -H '${securitySchemeType === 'API-KEY' ? 'apikey': 'Authorization'}: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        }\n    }\n\n    function generateSSESubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endPoint}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function generateASYNCSubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endPoint}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    if (!allTopics) {\n        return <Progress />;\n    } else {\n        return (\n            <Root>\n                <FormControl variant=\"standard\" className={classes.endpointSelectorRoot}>\n                    <InputLabel>Servers</InputLabel>\n                    <Select\n                        variant=\"standard\"\n                        className={classes.selectList}\n                        id=\"api-endpoint-select\"\n                        value={endPoint}\n                        displayEmpty\n                        onChange={handleServerChange}\n                    >\n                        {Object.entries(URLs).map(([key, value]) => {\n                            if (value) {\n                                return <MenuItem value={value} key={key}>{value}</MenuItem>;\n                            }\n                        })}\n                    </Select>\n                </FormControl>\n                {api.type === CONSTANTS.API_TYPES.WEBSUB && allTopics.list.map((topic, index) => (\n                    <WebhookSubscriptionUI\n                        topic={topic}\n                        generateGenericWHSubscriptionCurl={generateGenericWHSubscriptionCurl}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.SSE && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateSSESubscriptionCommand}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.WS && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateWSSubscriptionCommand}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.ASYNC && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateASYNCSubscriptionCommand}\n                        topic={topic}\n                        expandable={expandable}\n                    />\n                ))}\n            </Root>\n        );\n    }\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Icon from '@mui/material/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport TryOutController from '../../../Shared/ApiTryOut/TryOutController';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport AsyncApiUI from './AsyncApiUI';\n\nconst PREFIX = 'AsyncApiConsole';\n\nconst classes = {\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\nexport default function AsyncApiConsole() {\n    const intl = useIntl();\n\n    const { api } = useContext(ApiContext);\n    const [securitySchemeType, setSecurityScheme] = useState('OAUTH');\n    const [selectedEnvironment, setSelectedEnvironment] = useState();\n    const [productionAccessToken, setProductionAccessToken] = useState();\n    const [sandboxAccessToken, setSandboxAccessToken] = useState();\n    const [environments, setEnvironments] = useState(null);\n    const [scopes, setScopes] = useState(null);\n    const [labels, setLabels] = useState(null);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedKeyType, setSelectedKey] = useState('PRODUCTION');\n    const [keys, setKeys] = useState([]);\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject.length > 0 ? environmentObject[0].URLs : []);\n    const [notFound, setNotFound] = useState(false);\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n\n    const user = AuthManager.getUser();\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseAPI = apiClient.getAPIById(apiID);\n        promiseAPI\n            .then((apiResponse) => {\n                const apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    const environment = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                    setEnvironments(environment);\n                } else {\n                    setEnvironments([]);\n                }\n                if (apiData.labels) {\n                    const Label = apiData.labels.map((label) => {\n                        return label.name;\n                    });\n                    setLabels(Label);\n                } else {\n                    setLabels([]);\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => {\n                        return scope.name;\n                    });\n                    setScopes(scopeList);\n                } else {\n                    setScopes([]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.AsyncApi.error.occurred',\n                        defaultMessage: 'Error occurred while retrieving the API',\n                    }));\n                }\n                setScopes([]);\n                setEnvironments([]);\n                setLabels([]);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n    }, []);\n\n    /**\n     * Load the access token for given key type\n     */\n    function updateAccessToken() {\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        if (selectedKeyType === 'PRODUCTION') {\n            setProductionAccessToken(accessToken);\n        } else {\n            setSandboxAccessToken(accessToken);\n        }\n    }\n\n    /**\n     * set Password\n     * @param {*} selectedKey\n     * @param {*} isUpdateToken\n     */\n    function setSelectedKeyType(selectedKey, isUpdateToken) {\n        if (isUpdateToken && (!api.advertiseInfo || !api.advertiseInfo.advertised)) {\n            setSelectedKey(selectedKey, updateAccessToken);\n        } else {\n            setSelectedKey(selectedKey);\n        }\n    }\n\n    function accessTokenProvider() {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    if (api === null || !scopes || !labels || !environments) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.Api.Unavailable' defaultMessage='API Not Found !' />;\n    }\n\n    let isApiKeyEnabled = false;\n\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n        }\n    }\n\n    if (api.advertiseInfo && api.advertiseInfo.advertised) {\n        authorizationHeader = advAuthHeader;\n    }\n\n    const generateUrls = (url) => {\n        const urlJson = {\n            http: null,\n            https: null,\n            ws: null,\n            wss: null,\n        };\n        const [protocol] = url.split('://');\n        urlJson[protocol] = url;\n        return urlJson;\n    };\n\n    const getURLs = () => {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            if (selectedEndpoint === 'PRODUCTION') {\n                return generateUrls(api.advertiseInfo.apiExternalProductionEndpoint);\n            } else if (selectedEndpoint === 'SANDBOX') {\n                return generateUrls(api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return URLs;\n    };\n\n    return (\n        <Root>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>info</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                        + 'in and subscribe to the API to generate an access token. If you already '\n                                        + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid container className={classes.grid}>\n                    <TryOutController\n                        setSecurityScheme={setSecurityScheme}\n                        securitySchemeType={securitySchemeType}\n                        setSelectedEnvironment={setSelectedEnvironment}\n                        selectedEnvironment={selectedEnvironment}\n                        productionAccessToken={productionAccessToken}\n                        setProductionAccessToken={setProductionAccessToken}\n                        sandboxAccessToken={sandboxAccessToken}\n                        setSandboxAccessToken={setSandboxAccessToken}\n                        environments={environments}\n                        scopes={scopes}\n                        labels={labels}\n                        setUsername={setUsername}\n                        setPassword={setPassword}\n                        username={username}\n                        password={password}\n                        setSelectedKeyType={setSelectedKeyType}\n                        selectedKeyType={selectedKeyType}\n                        setKeys={setKeys}\n                        setURLs={setURLs}\n                        setProductionApiKey={setProductionApiKey}\n                        setSandboxApiKey={setSandboxApiKey}\n                        productionApiKey={productionApiKey}\n                        sandboxApiKey={sandboxApiKey}\n                        environmentObject={environmentObject}\n                        setAdvAuthHeader={setAdvAuthHeader}\n                        setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                        advAuthHeader={advAuthHeader}\n                        advAuthHeaderValue={advAuthHeaderValue}\n                        setSelectedEndpoint={setSelectedEndpoint}\n                        selectedEndpoint={selectedEndpoint}\n                        api={api}\n                        URLs={null}\n                    />\n                </Grid>\n            </Paper>\n            <Paper className={classes.paper}>\n                <AsyncApiUI\n                    authorizationHeader={authorizationHeader}\n                    URLs={getURLs()}\n                    securitySchemeType={securitySchemeType}\n                    accessTokenProvider={accessTokenProvider}\n                />\n            </Paper>\n        </Root>\n    );\n}\n\nAsyncApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"names":["reducer","state","_ref","field","value","_objectSpread","props","intl","useIntl","verb","topic","type","toLowerCase","trimmedVerb","substr","theme","useTheme","backgroundColor","custom","resourceChipColors","generateGenericWHSubscriptionCurl","initialSubscriptionState","name","secret","lease","mode","callback","curl","setCurl","useState","formError","setFormError","dispatch","useReducer","handleChange","e","target","React","Accordion","sx","marginBottom","border","AccordionSummary","expandIcon","ExpandMoreIcon","id","Utils","hexToRGBA","maxHeight","borderColor","Grid","container","direction","justifyContent","alignItems","spacing","item","md","Badge","invisible","color","variant","Button","disableFocusRipple","size","width","toUpperCase","Typography","display","style","margin","gutterBottom","AccordionDetails","wrap","xs","RadioGroup","row","onChange","FormControlLabel","control","Radio","label","formatMessage","defaultMessage","TextField","error","required","placeholder","fullWidth","InputProps","disableUnderline","classes","root","padding","marginTop","input","borderRadius","palette","common","white","transition","transitions","create","boxShadow","fontSize","InputLabelProps","shrink","defaultValue","multiline","curlGenerator","fontFamily","fontWeight","AccordionActions","paddingRight","onClick","handleClick","length","FormattedMessage","navigator","clipboard","writeText","then","Alert","info","GenericSubscriptionUI","generateGenericSubscriptionCommand","expandable","command","setCommand","pointerEvents","PREFIX","endpointSelectorRoot","selectList","Root","styled","paddingBottom","minWidth","maxWidth","AsyncApiUI","authorizationHeader","URLs","securitySchemeType","accessTokenProvider","api","useContext","ApiContext","isAdvertised","advertiseInfo","advertised","initialEndpoint","http","https","CONSTANTS","API_TYPES","WS","ws","wss","allTopics","setAllTopics","endPoint","setEndpoint","useEffect","apiID","Api","getAllTopics","response","body","catch","console","log","generateAccessToken","token","subscription","encodeURIComponent","adveritsed","getTopicName","topicName","charAt","substring","generateWSSubscriptionCommand","includes","wscat","generateSSESubscriptionCommand","generateASYNCSubscriptionCommand","FormControl","className","InputLabel","Select","displayEmpty","event","Object","entries","map","key","MenuItem","WEBSUB","list","index","WebhookSubscriptionUI","SSE","ASYNC","Progress","paper","grid","userNotificationPaper","titleSub","marginLeft","paddingTop","AsyncApiConsole","setSecurityScheme","selectedEnvironment","setSelectedEnvironment","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","environments","setEnvironments","scopes","setScopes","labels","setLabels","username","setUsername","password","setPassword","selectedKeyType","setSelectedKey","keys","setKeys","sandboxApiKey","setSandboxApiKey","productionApiKey","setProductionApiKey","environmentObject","endpointURLs","setURLs","notFound","setNotFound","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","user","AuthManager","getUser","updateAccessToken","accessToken","get","getAPIById","apiResponse","apiData","obj","environment","endpoint","environmentName","displayName","environmentDisplayName","Label","scopeList","scope","status","isApiKeyEnabled","securityScheme","generateUrls","url","urlJson","protocol","split","Paper","component","Icon","TryOutController","setSelectedKeyType","selectedKey","isUpdateToken","getURLs","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","btoa","propTypes","PropTypes","isRequired"],"sourceRoot":""}